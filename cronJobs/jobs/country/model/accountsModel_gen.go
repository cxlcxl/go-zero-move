// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountsFieldNames          = builder.RawFieldNames(&Accounts{})
	accountsRows                = strings.Join(accountsFieldNames, ",")
	accountsRowsExpectAutoSet   = strings.Join(stringx.Remove(accountsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	accountsRowsWithPlaceHolder = strings.Join(stringx.Remove(accountsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	accountsModel interface {
		Insert(ctx context.Context, data *Accounts) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Accounts, error)
		FindOneByAdvertiserId(ctx context.Context, advertiserId string) (*Accounts, error)
		Update(ctx context.Context, newData *Accounts) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAccountsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Accounts struct {
		Id           int64     `db:"id"`
		ParentId     int64     `db:"parent_id"`     // 所属上级服务商
		AdvertiserId string    `db:"advertiser_id"` // 广告主账户ID
		DeveloperId  string    `db:"developer_id"`  // 开发者ID
		AccountType  int64     `db:"account_type"`  // 账户类型
		State        int64     `db:"state"`         // 状态
		AccountName  string    `db:"account_name"`  // 账户名
		ClientId     string    `db:"client_id"`     // 客户端ID
		IsAuth       int64     `db:"is_auth"`       // 是否已认证
		Secret       string    `db:"secret"`        // 密钥
		CreatedAt    time.Time `db:"created_at"`    // 添加时间
		UpdatedAt    time.Time `db:"updated_at"`    // 最后一次修改时间
	}
)

func newAccountsModel(conn sqlx.SqlConn) *defaultAccountsModel {
	return &defaultAccountsModel{
		conn:  conn,
		table: "`accounts`",
	}
}

func (m *defaultAccountsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAccountsModel) FindOne(ctx context.Context, id int64) (*Accounts, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountsRows, m.table)
	var resp Accounts
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountsModel) FindOneByAdvertiserId(ctx context.Context, advertiserId string) (*Accounts, error) {
	var resp Accounts
	query := fmt.Sprintf("select %s from %s where `advertiser_id` = ? limit 1", accountsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, advertiserId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountsModel) Insert(ctx context.Context, data *Accounts) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, accountsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ParentId, data.AdvertiserId, data.DeveloperId, data.AccountType, data.State, data.AccountName, data.ClientId, data.IsAuth, data.Secret, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultAccountsModel) Update(ctx context.Context, newData *Accounts) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, accountsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ParentId, newData.AdvertiserId, newData.DeveloperId, newData.AccountType, newData.State, newData.AccountName, newData.ClientId, newData.IsAuth, newData.Secret, newData.CreatedAt, newData.UpdatedAt, newData.Id)
	return err
}

func (m *defaultAccountsModel) tableName() string {
	return m.table
}
