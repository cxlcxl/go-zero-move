// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adsRequestLogsFieldNames          = builder.RawFieldNames(&AdsRequestLogs{})
	adsRequestLogsRows                = strings.Join(adsRequestLogsFieldNames, ",")
	adsRequestLogsRowsExpectAutoSet   = strings.Join(stringx.Remove(adsRequestLogsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	adsRequestLogsRowsWithPlaceHolder = strings.Join(stringx.Remove(adsRequestLogsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	adsRequestLogsModel interface {
		Insert(ctx context.Context, data *AdsRequestLogs) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AdsRequestLogs, error)
		FindOneByStatDayApiModuleAccountId(ctx context.Context, statDay time.Time, apiModule string, accountId int64) (*AdsRequestLogs, error)
		Update(ctx context.Context, newData *AdsRequestLogs) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAdsRequestLogsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AdsRequestLogs struct {
		Id                 int64     `db:"id"`
		StatDay            time.Time `db:"stat_day"`   // 数据日期
		ApiModule          string    `db:"api_module"` // 数据模块
		AccountId          int64     `db:"account_id"`
		RequestJsonBody    string    `db:"request_json_body"`    // 请求报文
		CurrentRequestPage int64     `db:"current_request_page"` // 本次请求页码
		NextRequestPage    int64     `db:"next_request_page"`    // 下次请求页码
		IsCompleted        int64     `db:"is_completed"`         // 已完成本次请求
		TotalPage          int64     `db:"total_page"`           // 总页数
		TotalNum           int64     `db:"total_num"`            // 总数
		PageSize           int64     `db:"page_size"`            // 页大小
		LastRequestTime    time.Time `db:"last_request_time"`    // 最后请求时间
	}
)

func newAdsRequestLogsModel(conn sqlx.SqlConn) *defaultAdsRequestLogsModel {
	return &defaultAdsRequestLogsModel{
		conn:  conn,
		table: "`ads_request_logs`",
	}
}

func (m *defaultAdsRequestLogsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAdsRequestLogsModel) FindOne(ctx context.Context, id int64) (*AdsRequestLogs, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adsRequestLogsRows, m.table)
	var resp AdsRequestLogs
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdsRequestLogsModel) FindOneByStatDayApiModuleAccountId(ctx context.Context, statDay time.Time, apiModule string, accountId int64) (*AdsRequestLogs, error) {
	var resp AdsRequestLogs
	query := fmt.Sprintf("select %s from %s where `stat_day` = ? and `api_module` = ? and `account_id` = ? limit 1", adsRequestLogsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, statDay, apiModule, accountId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdsRequestLogsModel) Insert(ctx context.Context, data *AdsRequestLogs) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, adsRequestLogsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.StatDay, data.ApiModule, data.AccountId, data.RequestJsonBody, data.CurrentRequestPage, data.NextRequestPage, data.IsCompleted, data.TotalPage, data.TotalNum, data.PageSize, data.LastRequestTime)
	return ret, err
}

func (m *defaultAdsRequestLogsModel) Update(ctx context.Context, newData *AdsRequestLogs) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, adsRequestLogsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.StatDay, newData.ApiModule, newData.AccountId, newData.RequestJsonBody, newData.CurrentRequestPage, newData.NextRequestPage, newData.IsCompleted, newData.TotalPage, newData.TotalNum, newData.PageSize, newData.LastRequestTime, newData.Id)
	return err
}

func (m *defaultAdsRequestLogsModel) tableName() string {
	return m.table
}
