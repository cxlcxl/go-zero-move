// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	positionBasePricesFieldNames          = builder.RawFieldNames(&PositionBasePrices{})
	positionBasePricesRows                = strings.Join(positionBasePricesFieldNames, ",")
	positionBasePricesRowsExpectAutoSet   = strings.Join(stringx.Remove(positionBasePricesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	positionBasePricesRowsWithPlaceHolder = strings.Join(stringx.Remove(positionBasePricesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	positionBasePricesModel interface {
		Insert(ctx context.Context, data *PositionBasePrices) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PositionBasePrices, error)
		Update(ctx context.Context, newData *PositionBasePrices) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPositionBasePricesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PositionBasePrices struct {
		Id             int64   `db:"id"`
		CreativeSizeId string  `db:"creative_size_id"` // 版位ID
		PriceType      string  `db:"price_type"`       // 付费方式
		BasePrice      float64 `db:"base_price"`       // 底价
	}
)

func newPositionBasePricesModel(conn sqlx.SqlConn) *defaultPositionBasePricesModel {
	return &defaultPositionBasePricesModel{
		conn:  conn,
		table: "`position_base_prices`",
	}
}

func (m *defaultPositionBasePricesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPositionBasePricesModel) FindOne(ctx context.Context, id int64) (*PositionBasePrices, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", positionBasePricesRows, m.table)
	var resp PositionBasePrices
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPositionBasePricesModel) Insert(ctx context.Context, data *PositionBasePrices) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, positionBasePricesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CreativeSizeId, data.PriceType, data.BasePrice)
	return ret, err
}

func (m *defaultPositionBasePricesModel) Update(ctx context.Context, data *PositionBasePrices) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, positionBasePricesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CreativeSizeId, data.PriceType, data.BasePrice, data.Id)
	return err
}

func (m *defaultPositionBasePricesModel) tableName() string {
	return m.table
}
