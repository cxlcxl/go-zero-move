// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appsFieldNames          = builder.RawFieldNames(&Apps{})
	appsRows                = strings.Join(appsFieldNames, ",")
	appsRowsExpectAutoSet   = strings.Join(stringx.Remove(appsFieldNames, "`id`", "`create_at`", "`update_at`"), ",")
	appsRowsWithPlaceHolder = strings.Join(stringx.Remove(appsFieldNames, "`id`", "`created_at`", "`update_at`"), "=?,") + "=?"
)

type (
	appsModel interface {
		Insert(ctx context.Context, data *Apps) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Apps, error)
		FindOneByAppId(ctx context.Context, appId string) (*Apps, error)
		Update(ctx context.Context, newData *Apps) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAppsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Apps struct {
		Id                  int64     `db:"id"`
		AccountId           int64     `db:"account_id"`    // 账户ID;对应 accounts 表的id字段
		AdvertiserId        string    `db:"advertiser_id"` // 广告主账户ID
		AppId               string    `db:"app_id"`        // 第三方应用ID，例如华为APP ID : C10134672；可能存在GP的应用ID 32位
		AppName             string    `db:"app_name"`      // 应用名称
		AppType             string    `db:"app_type"`      // 产品/应用类型
		PkgName             string    `db:"pkg_name"`      // 应用包名或BundleID
		Channel             int64     `db:"channel"`       // 系统平台(渠道)：华为 AppGallery；GooglePlay; AppStore
		Tags                string    `db:"tags"`          // 应用标签
		IconUrl             string    `db:"icon_url"`      // 图标
		ProductId           string    `db:"product_id"`    // 产品ID，创建任务时需要
		AppStoreDownloadUrl string    `db:"app_store_download_url"`
		CreatedAt           time.Time `db:"created_at"` // 创建时间
		UpdatedAt           time.Time `db:"updated_at"` // 最后更新时间
	}
)

func newAppsModel(conn sqlx.SqlConn) *defaultAppsModel {
	return &defaultAppsModel{
		conn:  conn,
		table: "`apps`",
	}
}

func (m *defaultAppsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAppsModel) FindOne(ctx context.Context, id int64) (*Apps, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appsRows, m.table)
	var resp Apps
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppsModel) FindOneByAppId(ctx context.Context, appId string) (*Apps, error) {
	var resp Apps
	query := fmt.Sprintf("select %s from %s where `app_id` = ? limit 1", appsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, appId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppsModel) Insert(ctx context.Context, data *Apps) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, appsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AccountId, data.AdvertiserId, data.AppId, data.AppName, data.AppType, data.PkgName, data.Channel, data.Tags, data.IconUrl, data.ProductId, data.AppStoreDownloadUrl, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultAppsModel) Update(ctx context.Context, newData *Apps) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, appsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.AccountId, newData.AdvertiserId, newData.AppId, newData.AppName, newData.AppType, newData.PkgName, newData.Channel, newData.Tags, newData.IconUrl, newData.ProductId, newData.AppStoreDownloadUrl, newData.UpdatedAt, newData.Id)
	return err
}

func (m *defaultAppsModel) tableName() string {
	return m.table
}
