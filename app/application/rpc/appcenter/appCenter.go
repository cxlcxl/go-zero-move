// Code generated by goctl. DO NOT EDIT!
// Source: app.proto

package appcenter

import (
	"context"

	"business/app/application/rpc/apps"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AppInfo           = apps.AppInfo
	AppInfoReq        = apps.AppInfoReq
	AppListReq        = apps.AppListReq
	AppListResp       = apps.AppListResp
	Apps              = apps.Apps
	AppsResp          = apps.AppsResp
	BaseResp          = apps.BaseResp
	BatchCreateAppReq = apps.BatchCreateAppReq
	CreateAppReq      = apps.CreateAppReq
	GetByAppIdReq     = apps.GetByAppIdReq
	GetByAppIdsReq    = apps.GetByAppIdsReq
	GetByAppNameReq   = apps.GetByAppNameReq
	GetByIdsReq       = apps.GetByIdsReq

	AppCenter interface {
		CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateApp(ctx context.Context, in *AppInfo, opts ...grpc.CallOption) (*BaseResp, error)
		BatchCreateApp(ctx context.Context, in *BatchCreateAppReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetAppInfo(ctx context.Context, in *AppInfoReq, opts ...grpc.CallOption) (*AppInfo, error)
		GetAppInfoByAppId(ctx context.Context, in *GetByAppIdReq, opts ...grpc.CallOption) (*AppInfo, error)
		AppList(ctx context.Context, in *AppListReq, opts ...grpc.CallOption) (*AppListResp, error)
		GetAppsByIds(ctx context.Context, in *GetByIdsReq, opts ...grpc.CallOption) (*AppsResp, error)
		GetAppsByAppName(ctx context.Context, in *GetByAppNameReq, opts ...grpc.CallOption) (*AppsResp, error)
		GetAppsByAppIds(ctx context.Context, in *GetByAppIdsReq, opts ...grpc.CallOption) (*AppsResp, error)
	}

	defaultAppCenter struct {
		cli zrpc.Client
	}
)

func NewAppCenter(cli zrpc.Client) AppCenter {
	return &defaultAppCenter{
		cli: cli,
	}
}

func (m *defaultAppCenter) CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := apps.NewAppCenterClient(m.cli.Conn())
	return client.CreateApp(ctx, in, opts...)
}

func (m *defaultAppCenter) UpdateApp(ctx context.Context, in *AppInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := apps.NewAppCenterClient(m.cli.Conn())
	return client.UpdateApp(ctx, in, opts...)
}

func (m *defaultAppCenter) BatchCreateApp(ctx context.Context, in *BatchCreateAppReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := apps.NewAppCenterClient(m.cli.Conn())
	return client.BatchCreateApp(ctx, in, opts...)
}

func (m *defaultAppCenter) GetAppInfo(ctx context.Context, in *AppInfoReq, opts ...grpc.CallOption) (*AppInfo, error) {
	client := apps.NewAppCenterClient(m.cli.Conn())
	return client.GetAppInfo(ctx, in, opts...)
}

func (m *defaultAppCenter) GetAppInfoByAppId(ctx context.Context, in *GetByAppIdReq, opts ...grpc.CallOption) (*AppInfo, error) {
	client := apps.NewAppCenterClient(m.cli.Conn())
	return client.GetAppInfoByAppId(ctx, in, opts...)
}

func (m *defaultAppCenter) AppList(ctx context.Context, in *AppListReq, opts ...grpc.CallOption) (*AppListResp, error) {
	client := apps.NewAppCenterClient(m.cli.Conn())
	return client.AppList(ctx, in, opts...)
}

func (m *defaultAppCenter) GetAppsByIds(ctx context.Context, in *GetByIdsReq, opts ...grpc.CallOption) (*AppsResp, error) {
	client := apps.NewAppCenterClient(m.cli.Conn())
	return client.GetAppsByIds(ctx, in, opts...)
}

func (m *defaultAppCenter) GetAppsByAppName(ctx context.Context, in *GetByAppNameReq, opts ...grpc.CallOption) (*AppsResp, error) {
	client := apps.NewAppCenterClient(m.cli.Conn())
	return client.GetAppsByAppName(ctx, in, opts...)
}

func (m *defaultAppCenter) GetAppsByAppIds(ctx context.Context, in *GetByAppIdsReq, opts ...grpc.CallOption) (*AppsResp, error) {
	client := apps.NewAppCenterClient(m.cli.Conn())
	return client.GetAppsByAppIds(ctx, in, opts...)
}
