// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pb/app.proto

package apps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppCenterClient is the client API for AppCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppCenterClient interface {
	CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*BaseResp, error)
	UpdateApp(ctx context.Context, in *AppInfo, opts ...grpc.CallOption) (*BaseResp, error)
	BatchCreateApp(ctx context.Context, in *BatchCreateAppReq, opts ...grpc.CallOption) (*BaseResp, error)
	GetAppInfo(ctx context.Context, in *AppInfoReq, opts ...grpc.CallOption) (*AppInfo, error)
	GetAppInfoByAppId(ctx context.Context, in *GetByAppIdReq, opts ...grpc.CallOption) (*AppInfo, error)
	AppList(ctx context.Context, in *AppListReq, opts ...grpc.CallOption) (*AppListResp, error)
	GetAppsByIds(ctx context.Context, in *GetByIdsReq, opts ...grpc.CallOption) (*AppsResp, error)
	GetAppsByAppName(ctx context.Context, in *GetByAppNameReq, opts ...grpc.CallOption) (*AppsResp, error)
	GetAppsByAppIds(ctx context.Context, in *GetByAppIdsReq, opts ...grpc.CallOption) (*AppsResp, error)
}

type appCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewAppCenterClient(cc grpc.ClientConnInterface) AppCenterClient {
	return &appCenterClient{cc}
}

func (c *appCenterClient) CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/apps.AppCenter/CreateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appCenterClient) UpdateApp(ctx context.Context, in *AppInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/apps.AppCenter/UpdateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appCenterClient) BatchCreateApp(ctx context.Context, in *BatchCreateAppReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/apps.AppCenter/BatchCreateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appCenterClient) GetAppInfo(ctx context.Context, in *AppInfoReq, opts ...grpc.CallOption) (*AppInfo, error) {
	out := new(AppInfo)
	err := c.cc.Invoke(ctx, "/apps.AppCenter/GetAppInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appCenterClient) GetAppInfoByAppId(ctx context.Context, in *GetByAppIdReq, opts ...grpc.CallOption) (*AppInfo, error) {
	out := new(AppInfo)
	err := c.cc.Invoke(ctx, "/apps.AppCenter/GetAppInfoByAppId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appCenterClient) AppList(ctx context.Context, in *AppListReq, opts ...grpc.CallOption) (*AppListResp, error) {
	out := new(AppListResp)
	err := c.cc.Invoke(ctx, "/apps.AppCenter/AppList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appCenterClient) GetAppsByIds(ctx context.Context, in *GetByIdsReq, opts ...grpc.CallOption) (*AppsResp, error) {
	out := new(AppsResp)
	err := c.cc.Invoke(ctx, "/apps.AppCenter/GetAppsByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appCenterClient) GetAppsByAppName(ctx context.Context, in *GetByAppNameReq, opts ...grpc.CallOption) (*AppsResp, error) {
	out := new(AppsResp)
	err := c.cc.Invoke(ctx, "/apps.AppCenter/GetAppsByAppName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appCenterClient) GetAppsByAppIds(ctx context.Context, in *GetByAppIdsReq, opts ...grpc.CallOption) (*AppsResp, error) {
	out := new(AppsResp)
	err := c.cc.Invoke(ctx, "/apps.AppCenter/GetAppsByAppIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppCenterServer is the server API for AppCenter service.
// All implementations must embed UnimplementedAppCenterServer
// for forward compatibility
type AppCenterServer interface {
	CreateApp(context.Context, *CreateAppReq) (*BaseResp, error)
	UpdateApp(context.Context, *AppInfo) (*BaseResp, error)
	BatchCreateApp(context.Context, *BatchCreateAppReq) (*BaseResp, error)
	GetAppInfo(context.Context, *AppInfoReq) (*AppInfo, error)
	GetAppInfoByAppId(context.Context, *GetByAppIdReq) (*AppInfo, error)
	AppList(context.Context, *AppListReq) (*AppListResp, error)
	GetAppsByIds(context.Context, *GetByIdsReq) (*AppsResp, error)
	GetAppsByAppName(context.Context, *GetByAppNameReq) (*AppsResp, error)
	GetAppsByAppIds(context.Context, *GetByAppIdsReq) (*AppsResp, error)
	mustEmbedUnimplementedAppCenterServer()
}

// UnimplementedAppCenterServer must be embedded to have forward compatible implementations.
type UnimplementedAppCenterServer struct {
}

func (UnimplementedAppCenterServer) CreateApp(context.Context, *CreateAppReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedAppCenterServer) UpdateApp(context.Context, *AppInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedAppCenterServer) BatchCreateApp(context.Context, *BatchCreateAppReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateApp not implemented")
}
func (UnimplementedAppCenterServer) GetAppInfo(context.Context, *AppInfoReq) (*AppInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppInfo not implemented")
}
func (UnimplementedAppCenterServer) GetAppInfoByAppId(context.Context, *GetByAppIdReq) (*AppInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppInfoByAppId not implemented")
}
func (UnimplementedAppCenterServer) AppList(context.Context, *AppListReq) (*AppListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppList not implemented")
}
func (UnimplementedAppCenterServer) GetAppsByIds(context.Context, *GetByIdsReq) (*AppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppsByIds not implemented")
}
func (UnimplementedAppCenterServer) GetAppsByAppName(context.Context, *GetByAppNameReq) (*AppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppsByAppName not implemented")
}
func (UnimplementedAppCenterServer) GetAppsByAppIds(context.Context, *GetByAppIdsReq) (*AppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppsByAppIds not implemented")
}
func (UnimplementedAppCenterServer) mustEmbedUnimplementedAppCenterServer() {}

// UnsafeAppCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppCenterServer will
// result in compilation errors.
type UnsafeAppCenterServer interface {
	mustEmbedUnimplementedAppCenterServer()
}

func RegisterAppCenterServer(s grpc.ServiceRegistrar, srv AppCenterServer) {
	s.RegisterService(&AppCenter_ServiceDesc, srv)
}

func _AppCenter_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppCenterServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.AppCenter/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppCenterServer).CreateApp(ctx, req.(*CreateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppCenter_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppCenterServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.AppCenter/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppCenterServer).UpdateApp(ctx, req.(*AppInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppCenter_BatchCreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppCenterServer).BatchCreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.AppCenter/BatchCreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppCenterServer).BatchCreateApp(ctx, req.(*BatchCreateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppCenter_GetAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppCenterServer).GetAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.AppCenter/GetAppInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppCenterServer).GetAppInfo(ctx, req.(*AppInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppCenter_GetAppInfoByAppId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAppIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppCenterServer).GetAppInfoByAppId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.AppCenter/GetAppInfoByAppId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppCenterServer).GetAppInfoByAppId(ctx, req.(*GetByAppIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppCenter_AppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppCenterServer).AppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.AppCenter/AppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppCenterServer).AppList(ctx, req.(*AppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppCenter_GetAppsByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppCenterServer).GetAppsByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.AppCenter/GetAppsByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppCenterServer).GetAppsByIds(ctx, req.(*GetByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppCenter_GetAppsByAppName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAppNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppCenterServer).GetAppsByAppName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.AppCenter/GetAppsByAppName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppCenterServer).GetAppsByAppName(ctx, req.(*GetByAppNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppCenter_GetAppsByAppIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAppIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppCenterServer).GetAppsByAppIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apps.AppCenter/GetAppsByAppIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppCenterServer).GetAppsByAppIds(ctx, req.(*GetByAppIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AppCenter_ServiceDesc is the grpc.ServiceDesc for AppCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apps.AppCenter",
	HandlerType: (*AppCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _AppCenter_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _AppCenter_UpdateApp_Handler,
		},
		{
			MethodName: "BatchCreateApp",
			Handler:    _AppCenter_BatchCreateApp_Handler,
		},
		{
			MethodName: "GetAppInfo",
			Handler:    _AppCenter_GetAppInfo_Handler,
		},
		{
			MethodName: "GetAppInfoByAppId",
			Handler:    _AppCenter_GetAppInfoByAppId_Handler,
		},
		{
			MethodName: "AppList",
			Handler:    _AppCenter_AppList_Handler,
		},
		{
			MethodName: "GetAppsByIds",
			Handler:    _AppCenter_GetAppsByIds_Handler,
		},
		{
			MethodName: "GetAppsByAppName",
			Handler:    _AppCenter_GetAppsByAppName_Handler,
		},
		{
			MethodName: "GetAppsByAppIds",
			Handler:    _AppCenter_GetAppsByAppIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/app.proto",
}
