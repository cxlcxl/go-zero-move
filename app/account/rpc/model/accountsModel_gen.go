// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountsFieldNames          = builder.RawFieldNames(&Accounts{})
	accountsRows                = strings.Join(accountsFieldNames, ",")
	accountsRowsExpectAutoSet   = strings.Join(stringx.Remove(accountsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	accountsRowsWithPlaceHolder = strings.Join(stringx.Remove(accountsFieldNames, "`id`", "`create_time`", "`update_time`", "`created_at`", "`update_at`"), "=?,") + "=?"

	cacheAccountsIdPrefix        = "cache:accounts:id:"
	cacheAccountsAccountIdPrefix = "cache:accounts:accountId:"
)

type (
	accountsModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Accounts) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Accounts, error)
		FindOneByAccountId(ctx context.Context, accountId string) (*Accounts, error)
		Update(ctx context.Context, newData *Accounts) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAccountsModel struct {
		sqlc.CachedConn
		table string
	}

	Accounts struct {
		Id          int64     `db:"id"`
		AccountId   string    `db:"account_id"` // 账户ID
		AccountType int64     `db:"account_type"`
		Email       string    `db:"email"`        // 邮箱
		AccountName string    `db:"account_name"` // 账户名
		CreatedAt   time.Time `db:"created_at"`   // 添加时间
		UpdatedAt   time.Time `db:"updated_at"`   // 最后一次修改时间
		State       int64     `db:"state"`
	}
)

func newAccountsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAccountsModel {
	return &defaultAccountsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`accounts`",
	}
}

func (m *defaultAccountsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	accountsAccountIdKey := fmt.Sprintf("%s%v", cacheAccountsAccountIdPrefix, data.AccountId)
	accountsIdKey := fmt.Sprintf("%s%v", cacheAccountsIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, accountsAccountIdKey, accountsIdKey)
	return err
}

func (m *defaultAccountsModel) FindOne(ctx context.Context, id int64) (*Accounts, error) {
	accountsIdKey := fmt.Sprintf("%s%v", cacheAccountsIdPrefix, id)
	var resp Accounts
	err := m.QueryRowCtx(ctx, &resp, accountsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountsModel) FindOneByAccountId(ctx context.Context, accountId string) (*Accounts, error) {
	accountsAccountIdKey := fmt.Sprintf("%s%v", cacheAccountsAccountIdPrefix, accountId)
	var resp Accounts
	err := m.QueryRowIndexCtx(ctx, &resp, accountsAccountIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `account_id` = ? limit 1", accountsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, accountId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountsModel) Insert(ctx context.Context, session sqlx.Session, data *Accounts) (sql.Result, error) {
	accountsAccountIdKey := fmt.Sprintf("%s%v", cacheAccountsAccountIdPrefix, data.AccountId)
	accountsIdKey := fmt.Sprintf("%s%v", cacheAccountsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, accountsRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.AccountId, data.AccountType, data.Email, data.AccountName, data.CreatedAt, data.UpdatedAt, data.State)
		}
		return conn.ExecCtx(ctx, query, data.AccountId, data.AccountType, data.Email, data.AccountName, data.CreatedAt, data.UpdatedAt, data.State)
	}, accountsAccountIdKey, accountsIdKey)
	return ret, err
}

func (m *defaultAccountsModel) Update(ctx context.Context, newData *Accounts) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	accountsAccountIdKey := fmt.Sprintf("%s%v", cacheAccountsAccountIdPrefix, data.AccountId)
	accountsIdKey := fmt.Sprintf("%s%v", cacheAccountsIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, accountsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.AccountId, newData.AccountType, newData.Email, newData.AccountName, newData.UpdatedAt, newData.State, newData.Id)
	}, accountsAccountIdKey, accountsIdKey)
	return err
}

func (m *defaultAccountsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAccountsIdPrefix, primary)
}

func (m *defaultAccountsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAccountsModel) tableName() string {
	return m.table
}
