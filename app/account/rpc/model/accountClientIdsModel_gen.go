// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountClientIdsFieldNames          = builder.RawFieldNames(&AccountClientIds{})
	accountClientIdsRows                = strings.Join(accountClientIdsFieldNames, ",")
	accountClientIdsRowsExpectAutoSet   = strings.Join(stringx.Remove(accountClientIdsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	accountClientIdsRowsWithPlaceHolder = strings.Join(stringx.Remove(accountClientIdsFieldNames, "`id`", "`create_time`", "`update_time`", "`created_at`", "`update_at`"), "=?,") + "=?"

	cacheAccountClientIdsIdPrefix = "cache:accountClientIds:id:"
)

type (
	accountClientIdsModel interface {
		Insert(ctx context.Context, data *AccountClientIds) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AccountClientIds, error)
		Update(ctx context.Context, newData *AccountClientIds) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAccountClientIdsModel struct {
		sqlc.CachedConn
		table string
	}

	AccountClientIds struct {
		Id        int64     `db:"id"`
		AccountId string    `db:"account_id"` // 账户ID
		ClientId  int64     `db:"client_id"`  // 客户端ID
		Secret    string    `db:"secret"`     // 密钥
		Comment   string    `db:"comment"`    // 备注
		CreatedAt time.Time `db:"created_at"` // 添加时间
		UpdatedAt time.Time `db:"updated_at"` // 最后一次修改时间
	}
)

func newAccountClientIdsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAccountClientIdsModel {
	return &defaultAccountClientIdsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`account_client_ids`",
	}
}

func (m *defaultAccountClientIdsModel) Delete(ctx context.Context, id int64) error {
	accountClientIdsIdKey := fmt.Sprintf("%s%v", cacheAccountClientIdsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, accountClientIdsIdKey)
	return err
}

func (m *defaultAccountClientIdsModel) FindOne(ctx context.Context, id int64) (*AccountClientIds, error) {
	accountClientIdsIdKey := fmt.Sprintf("%s%v", cacheAccountClientIdsIdPrefix, id)
	var resp AccountClientIds
	err := m.QueryRowCtx(ctx, &resp, accountClientIdsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountClientIdsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountClientIdsModel) Insert(ctx context.Context, data *AccountClientIds) (sql.Result, error) {
	accountClientIdsIdKey := fmt.Sprintf("%s%v", cacheAccountClientIdsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, accountClientIdsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AccountId, data.ClientId, data.Secret, data.Comment, data.CreatedAt, data.UpdatedAt)
	}, accountClientIdsIdKey)
	return ret, err
}

func (m *defaultAccountClientIdsModel) Update(ctx context.Context, data *AccountClientIds) error {
	accountClientIdsIdKey := fmt.Sprintf("%s%v", cacheAccountClientIdsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, accountClientIdsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AccountId, data.ClientId, data.Secret, data.Comment, data.UpdatedAt, data.Id)
	}, accountClientIdsIdKey)
	return err
}

func (m *defaultAccountClientIdsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAccountClientIdsIdPrefix, primary)
}

func (m *defaultAccountClientIdsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountClientIdsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAccountClientIdsModel) tableName() string {
	return m.table
}
