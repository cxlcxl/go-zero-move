// Code generated by goctl. DO NOT EDIT!
// Source: account.proto

package accountcenter

import (
	"context"

	"business/app/account/rpc/account"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AccountCreateReq   = account.AccountCreateReq
	AccountInfo        = account.AccountInfo
	AccountInfoReq     = account.AccountInfoReq
	AccountListReq     = account.AccountListReq
	AccountListResp    = account.AccountListResp
	AccountSearchReq   = account.AccountSearchReq
	AccountSearchResp  = account.AccountSearchResp
	AccountUpdateReq   = account.AccountUpdateReq
	BaseResp           = account.BaseResp
	DefaultListReq     = account.DefaultListReq
	GetByAccountIdsReq = account.GetByAccountIdsReq
	GetTokenReq        = account.GetTokenReq
	TokenInfo          = account.TokenInfo

	AccountCenter interface {
		AccountCreate(ctx context.Context, in *AccountCreateReq, opts ...grpc.CallOption) (*BaseResp, error)
		AccountUpdate(ctx context.Context, in *AccountUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetAccountInfo(ctx context.Context, in *AccountInfoReq, opts ...grpc.CallOption) (*AccountInfo, error)
		GetAccountByClientId(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*AccountInfo, error)
		AccountList(ctx context.Context, in *AccountListReq, opts ...grpc.CallOption) (*AccountListResp, error)
		AccountSearch(ctx context.Context, in *AccountSearchReq, opts ...grpc.CallOption) (*AccountSearchResp, error)
		GetAccountsByAccountIds(ctx context.Context, in *GetByAccountIdsReq, opts ...grpc.CallOption) (*AccountSearchResp, error)
		GetDefaultAccountList(ctx context.Context, in *DefaultListReq, opts ...grpc.CallOption) (*AccountSearchResp, error)
		GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*TokenInfo, error)
		SetToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error)
	}

	defaultAccountCenter struct {
		cli zrpc.Client
	}
)

func NewAccountCenter(cli zrpc.Client) AccountCenter {
	return &defaultAccountCenter{
		cli: cli,
	}
}

func (m *defaultAccountCenter) AccountCreate(ctx context.Context, in *AccountCreateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := account.NewAccountCenterClient(m.cli.Conn())
	return client.AccountCreate(ctx, in, opts...)
}

func (m *defaultAccountCenter) AccountUpdate(ctx context.Context, in *AccountUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := account.NewAccountCenterClient(m.cli.Conn())
	return client.AccountUpdate(ctx, in, opts...)
}

func (m *defaultAccountCenter) GetAccountInfo(ctx context.Context, in *AccountInfoReq, opts ...grpc.CallOption) (*AccountInfo, error) {
	client := account.NewAccountCenterClient(m.cli.Conn())
	return client.GetAccountInfo(ctx, in, opts...)
}

func (m *defaultAccountCenter) GetAccountByClientId(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*AccountInfo, error) {
	client := account.NewAccountCenterClient(m.cli.Conn())
	return client.GetAccountByClientId(ctx, in, opts...)
}

func (m *defaultAccountCenter) AccountList(ctx context.Context, in *AccountListReq, opts ...grpc.CallOption) (*AccountListResp, error) {
	client := account.NewAccountCenterClient(m.cli.Conn())
	return client.AccountList(ctx, in, opts...)
}

func (m *defaultAccountCenter) AccountSearch(ctx context.Context, in *AccountSearchReq, opts ...grpc.CallOption) (*AccountSearchResp, error) {
	client := account.NewAccountCenterClient(m.cli.Conn())
	return client.AccountSearch(ctx, in, opts...)
}

func (m *defaultAccountCenter) GetAccountsByAccountIds(ctx context.Context, in *GetByAccountIdsReq, opts ...grpc.CallOption) (*AccountSearchResp, error) {
	client := account.NewAccountCenterClient(m.cli.Conn())
	return client.GetAccountsByAccountIds(ctx, in, opts...)
}

func (m *defaultAccountCenter) GetDefaultAccountList(ctx context.Context, in *DefaultListReq, opts ...grpc.CallOption) (*AccountSearchResp, error) {
	client := account.NewAccountCenterClient(m.cli.Conn())
	return client.GetDefaultAccountList(ctx, in, opts...)
}

func (m *defaultAccountCenter) GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*TokenInfo, error) {
	client := account.NewAccountCenterClient(m.cli.Conn())
	return client.GetToken(ctx, in, opts...)
}

func (m *defaultAccountCenter) SetToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := account.NewAccountCenterClient(m.cli.Conn())
	return client.SetToken(ctx, in, opts...)
}
