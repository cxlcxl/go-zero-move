// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pb/account.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountCenterClient is the client API for AccountCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountCenterClient interface {
	ActList(ctx context.Context, in *ActListReq, opts ...grpc.CallOption) (*ActListResp, error)
	ActCreate(ctx context.Context, in *ActCreateReq, opts ...grpc.CallOption) (*BaseResp, error)
	ActUpdate(ctx context.Context, in *ActUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
	ActInfo(ctx context.Context, in *ActInfoReq, opts ...grpc.CallOption) (*ActInfoResp, error)
	ActClientIdsCreate(ctx context.Context, in *ActClientIdCreateReq, opts ...grpc.CallOption) (*BaseResp, error)
	ActClientIdsUpdate(ctx context.Context, in *ActClientIdUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
	GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*TokenInfo, error)
	SetToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error)
}

type accountCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountCenterClient(cc grpc.ClientConnInterface) AccountCenterClient {
	return &accountCenterClient{cc}
}

func (c *accountCenterClient) ActList(ctx context.Context, in *ActListReq, opts ...grpc.CallOption) (*ActListResp, error) {
	out := new(ActListResp)
	err := c.cc.Invoke(ctx, "/account.AccountCenter/ActList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountCenterClient) ActCreate(ctx context.Context, in *ActCreateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/account.AccountCenter/ActCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountCenterClient) ActUpdate(ctx context.Context, in *ActUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/account.AccountCenter/ActUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountCenterClient) ActInfo(ctx context.Context, in *ActInfoReq, opts ...grpc.CallOption) (*ActInfoResp, error) {
	out := new(ActInfoResp)
	err := c.cc.Invoke(ctx, "/account.AccountCenter/ActInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountCenterClient) ActClientIdsCreate(ctx context.Context, in *ActClientIdCreateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/account.AccountCenter/ActClientIdsCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountCenterClient) ActClientIdsUpdate(ctx context.Context, in *ActClientIdUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/account.AccountCenter/ActClientIdsUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountCenterClient) GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*TokenInfo, error) {
	out := new(TokenInfo)
	err := c.cc.Invoke(ctx, "/account.AccountCenter/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountCenterClient) SetToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/account.AccountCenter/SetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountCenterServer is the server API for AccountCenter service.
// All implementations must embed UnimplementedAccountCenterServer
// for forward compatibility
type AccountCenterServer interface {
	ActList(context.Context, *ActListReq) (*ActListResp, error)
	ActCreate(context.Context, *ActCreateReq) (*BaseResp, error)
	ActUpdate(context.Context, *ActUpdateReq) (*BaseResp, error)
	ActInfo(context.Context, *ActInfoReq) (*ActInfoResp, error)
	ActClientIdsCreate(context.Context, *ActClientIdCreateReq) (*BaseResp, error)
	ActClientIdsUpdate(context.Context, *ActClientIdUpdateReq) (*BaseResp, error)
	GetToken(context.Context, *GetTokenReq) (*TokenInfo, error)
	SetToken(context.Context, *TokenInfo) (*BaseResp, error)
	mustEmbedUnimplementedAccountCenterServer()
}

// UnimplementedAccountCenterServer must be embedded to have forward compatible implementations.
type UnimplementedAccountCenterServer struct {
}

func (UnimplementedAccountCenterServer) ActList(context.Context, *ActListReq) (*ActListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActList not implemented")
}
func (UnimplementedAccountCenterServer) ActCreate(context.Context, *ActCreateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActCreate not implemented")
}
func (UnimplementedAccountCenterServer) ActUpdate(context.Context, *ActUpdateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActUpdate not implemented")
}
func (UnimplementedAccountCenterServer) ActInfo(context.Context, *ActInfoReq) (*ActInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActInfo not implemented")
}
func (UnimplementedAccountCenterServer) ActClientIdsCreate(context.Context, *ActClientIdCreateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActClientIdsCreate not implemented")
}
func (UnimplementedAccountCenterServer) ActClientIdsUpdate(context.Context, *ActClientIdUpdateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActClientIdsUpdate not implemented")
}
func (UnimplementedAccountCenterServer) GetToken(context.Context, *GetTokenReq) (*TokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedAccountCenterServer) SetToken(context.Context, *TokenInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetToken not implemented")
}
func (UnimplementedAccountCenterServer) mustEmbedUnimplementedAccountCenterServer() {}

// UnsafeAccountCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountCenterServer will
// result in compilation errors.
type UnsafeAccountCenterServer interface {
	mustEmbedUnimplementedAccountCenterServer()
}

func RegisterAccountCenterServer(s grpc.ServiceRegistrar, srv AccountCenterServer) {
	s.RegisterService(&AccountCenter_ServiceDesc, srv)
}

func _AccountCenter_ActList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountCenterServer).ActList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountCenter/ActList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountCenterServer).ActList(ctx, req.(*ActListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountCenter_ActCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountCenterServer).ActCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountCenter/ActCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountCenterServer).ActCreate(ctx, req.(*ActCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountCenter_ActUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountCenterServer).ActUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountCenter/ActUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountCenterServer).ActUpdate(ctx, req.(*ActUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountCenter_ActInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountCenterServer).ActInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountCenter/ActInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountCenterServer).ActInfo(ctx, req.(*ActInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountCenter_ActClientIdsCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActClientIdCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountCenterServer).ActClientIdsCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountCenter/ActClientIdsCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountCenterServer).ActClientIdsCreate(ctx, req.(*ActClientIdCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountCenter_ActClientIdsUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActClientIdUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountCenterServer).ActClientIdsUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountCenter/ActClientIdsUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountCenterServer).ActClientIdsUpdate(ctx, req.(*ActClientIdUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountCenter_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountCenterServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountCenter/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountCenterServer).GetToken(ctx, req.(*GetTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountCenter_SetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountCenterServer).SetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountCenter/SetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountCenterServer).SetToken(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountCenter_ServiceDesc is the grpc.ServiceDesc for AccountCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountCenter",
	HandlerType: (*AccountCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActList",
			Handler:    _AccountCenter_ActList_Handler,
		},
		{
			MethodName: "ActCreate",
			Handler:    _AccountCenter_ActCreate_Handler,
		},
		{
			MethodName: "ActUpdate",
			Handler:    _AccountCenter_ActUpdate_Handler,
		},
		{
			MethodName: "ActInfo",
			Handler:    _AccountCenter_ActInfo_Handler,
		},
		{
			MethodName: "ActClientIdsCreate",
			Handler:    _AccountCenter_ActClientIdsCreate_Handler,
		},
		{
			MethodName: "ActClientIdsUpdate",
			Handler:    _AccountCenter_ActClientIdsUpdate_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _AccountCenter_GetToken_Handler,
		},
		{
			MethodName: "SetToken",
			Handler:    _AccountCenter_SetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/account.proto",
}
