syntax = "proto3";

option go_package = "./account";

package account;

message ActCreateReq {
  string account_name = 1;
  string account_id = 2;
  int64 account_type = 3;
  string email = 4;
  repeated ActClientId account_client_ids = 5;
}
message ActUpdateReq {
  int64 id = 1;
  string account_name = 2;
  string account_id = 3;
  int64 account_type = 4;
  string email = 5;
  int64 state = 6;
}
message ActInfoReq{
  int64 id = 1;
}
message ActClientId {
  int64 id = 1;
  int64 client_id = 2;
  string secret = 3;
  string comment = 4;
}
message ActClientIdCreateReq {
  string account_id = 1;
  repeated ActClientId account_client_ids = 2;
}
message ActClientIdUpdateReq {
  string account_id = 1;
  ActClientId account_client_ids = 2;
}
message ActListReq{
  string account_name = 1;
  string account_id = 2;
  int64 account_type = 3;
  int64 state = 4;
  int64 page = 5;
  int64 page_size = 6;
}

message ActInfo {
  int64 id = 1;
  string account_name = 2;
  string account_id = 3;
  int64 account_type = 4;
  string email = 5;
  int64 state = 6;
  int64 created_at = 7;
  int64 updated_at = 8;
  repeated ActClientId account_client_ids = 9;
}
message ActListResp{
  int64 total = 1;
  repeated ActInfo accounts = 2;
}
message ActInfoResp {
  ActInfo info=1;
}
message GetTokenReq {
  int64 client_id = 1;
}

message TokenInfo{
  int64 client_id = 1;
  string access_token = 2;
  string refresh_token = 3;
  int64 expired_at = 4;
}

message BaseResp {
  int64 code = 1;
}

service AccountCenter{
  rpc ActList(ActListReq) returns(ActListResp);
  rpc ActCreate(ActCreateReq) returns(BaseResp);
  rpc ActUpdate(ActUpdateReq) returns(BaseResp);
  rpc ActInfo(ActInfoReq) returns(ActInfoResp);
  rpc ActClientIdsCreate(ActClientIdCreateReq) returns(BaseResp);
  rpc ActClientIdsUpdate(ActClientIdUpdateReq) returns(BaseResp);
  rpc GetToken(GetTokenReq) returns(TokenInfo);
  rpc SetToken(TokenInfo) returns(BaseResp);
}