// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	oauthAccessTokensFieldNames          = builder.RawFieldNames(&OauthAccessTokens{})
	oauthAccessTokensRows                = strings.Join(oauthAccessTokensFieldNames, ",")
	oauthAccessTokensRowsExpectAutoSet   = strings.Join(stringx.Remove(oauthAccessTokensFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	oauthAccessTokensRowsWithPlaceHolder = strings.Join(stringx.Remove(oauthAccessTokensFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheOauthAccessTokensIdPrefix = "cache:oauthAccessTokens:id:"
)

type (
	oauthAccessTokensModel interface {
		Insert(ctx context.Context, data *OauthAccessTokens) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OauthAccessTokens, error)
		Update(ctx context.Context, newData *OauthAccessTokens) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOauthAccessTokensModel struct {
		sqlc.CachedConn
		table string
	}

	OauthAccessTokens struct {
		Id         int64     `db:"id"`
		UserId     int64     `db:"user_id"`
		ClientId   int64     `db:"client_id"` // 普通用户的授权，默认为1
		Token      string    `db:"token"`
		ActionName string    `db:"action_name"` // login|refresh|reset表示token生成动作
		Scopes     string    `db:"scopes"`      // 暂时预留,未启用
		Revoked    int64     `db:"revoked"`     // 是否撤销
		ClientIp   string    `db:"client_ip"`   // ipv6最长为128位
		CreatedAt  time.Time `db:"created_at"`  // 添加时间
		UpdatedAt  time.Time `db:"updated_at"`  // 最后一次修改时间
		ExpiresAt  time.Time `db:"expires_at"`  // 过期时间
	}
)

func newOauthAccessTokensModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultOauthAccessTokensModel {
	return &defaultOauthAccessTokensModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`oauth_access_tokens`",
	}
}

func (m *defaultOauthAccessTokensModel) Delete(ctx context.Context, id int64) error {
	oauthAccessTokensIdKey := fmt.Sprintf("%s%v", cacheOauthAccessTokensIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, oauthAccessTokensIdKey)
	return err
}

func (m *defaultOauthAccessTokensModel) FindOne(ctx context.Context, id int64) (*OauthAccessTokens, error) {
	oauthAccessTokensIdKey := fmt.Sprintf("%s%v", cacheOauthAccessTokensIdPrefix, id)
	var resp OauthAccessTokens
	err := m.QueryRowCtx(ctx, &resp, oauthAccessTokensIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", oauthAccessTokensRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOauthAccessTokensModel) Insert(ctx context.Context, data *OauthAccessTokens) (sql.Result, error) {
	oauthAccessTokensIdKey := fmt.Sprintf("%s%v", cacheOauthAccessTokensIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, oauthAccessTokensRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ClientId, data.Token, data.ActionName, data.Scopes, data.Revoked, data.ClientIp, data.CreatedAt, data.UpdatedAt, data.ExpiresAt)
	}, oauthAccessTokensIdKey)
	return ret, err
}

func (m *defaultOauthAccessTokensModel) Update(ctx context.Context, data *OauthAccessTokens) error {
	oauthAccessTokensIdKey := fmt.Sprintf("%s%v", cacheOauthAccessTokensIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, oauthAccessTokensRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.ClientId, data.Token, data.ActionName, data.Scopes, data.Revoked, data.ClientIp, data.CreatedAt, data.UpdatedAt, data.ExpiresAt, data.Id)
	}, oauthAccessTokensIdKey)
	return err
}

func (m *defaultOauthAccessTokensModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheOauthAccessTokensIdPrefix, primary)
}

func (m *defaultOauthAccessTokensModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", oauthAccessTokensRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOauthAccessTokensModel) tableName() string {
	return m.table
}
