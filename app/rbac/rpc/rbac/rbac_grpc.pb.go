// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pb/rbac.proto

package rbac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RbacCenterClient is the client API for RbacCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RbacCenterClient interface {
	GetUserInfoById(ctx context.Context, in *UserInfoIdReq, opts ...grpc.CallOption) (*UserInfoResp, error)
	GetUserInfoByEmail(ctx context.Context, in *UserInfoEmailReq, opts ...grpc.CallOption) (*UserInfoResp, error)
	GetUserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	UserCreate(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*BaseResp, error)
	UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
	UserDestroy(ctx context.Context, in *UserDestroyReq, opts ...grpc.CallOption) (*BaseResp, error)
	RoleCreate(ctx context.Context, in *RoleCreateReq, opts ...grpc.CallOption) (*BaseResp, error)
	RoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
	RoleDestroy(ctx context.Context, in *RoleDestroyReq, opts ...grpc.CallOption) (*BaseResp, error)
	GetRoleInfo(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*RoleDetail, error)
	GetAllRoles(ctx context.Context, in *AllRoles, opts ...grpc.CallOption) (*AllRolesResp, error)
}

type rbacCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewRbacCenterClient(cc grpc.ClientConnInterface) RbacCenterClient {
	return &rbacCenterClient{cc}
}

func (c *rbacCenterClient) GetUserInfoById(ctx context.Context, in *UserInfoIdReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, "/rbac.RbacCenter/GetUserInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacCenterClient) GetUserInfoByEmail(ctx context.Context, in *UserInfoEmailReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, "/rbac.RbacCenter/GetUserInfoByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacCenterClient) GetUserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	out := new(UserListResp)
	err := c.cc.Invoke(ctx, "/rbac.RbacCenter/GetUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacCenterClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/rbac.RbacCenter/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacCenterClient) UserCreate(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/rbac.RbacCenter/UserCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacCenterClient) UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/rbac.RbacCenter/UserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacCenterClient) UserDestroy(ctx context.Context, in *UserDestroyReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/rbac.RbacCenter/UserDestroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacCenterClient) RoleCreate(ctx context.Context, in *RoleCreateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/rbac.RbacCenter/RoleCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacCenterClient) RoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/rbac.RbacCenter/RoleUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacCenterClient) RoleDestroy(ctx context.Context, in *RoleDestroyReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/rbac.RbacCenter/RoleDestroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacCenterClient) GetRoleInfo(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*RoleDetail, error) {
	out := new(RoleDetail)
	err := c.cc.Invoke(ctx, "/rbac.RbacCenter/GetRoleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacCenterClient) GetAllRoles(ctx context.Context, in *AllRoles, opts ...grpc.CallOption) (*AllRolesResp, error) {
	out := new(AllRolesResp)
	err := c.cc.Invoke(ctx, "/rbac.RbacCenter/GetAllRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RbacCenterServer is the server API for RbacCenter service.
// All implementations must embed UnimplementedRbacCenterServer
// for forward compatibility
type RbacCenterServer interface {
	GetUserInfoById(context.Context, *UserInfoIdReq) (*UserInfoResp, error)
	GetUserInfoByEmail(context.Context, *UserInfoEmailReq) (*UserInfoResp, error)
	GetUserList(context.Context, *UserListReq) (*UserListResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	UserCreate(context.Context, *UserCreateReq) (*BaseResp, error)
	UserUpdate(context.Context, *UserUpdateReq) (*BaseResp, error)
	UserDestroy(context.Context, *UserDestroyReq) (*BaseResp, error)
	RoleCreate(context.Context, *RoleCreateReq) (*BaseResp, error)
	RoleUpdate(context.Context, *RoleUpdateReq) (*BaseResp, error)
	RoleDestroy(context.Context, *RoleDestroyReq) (*BaseResp, error)
	GetRoleInfo(context.Context, *RoleInfo) (*RoleDetail, error)
	GetAllRoles(context.Context, *AllRoles) (*AllRolesResp, error)
	mustEmbedUnimplementedRbacCenterServer()
}

// UnimplementedRbacCenterServer must be embedded to have forward compatible implementations.
type UnimplementedRbacCenterServer struct {
}

func (UnimplementedRbacCenterServer) GetUserInfoById(context.Context, *UserInfoIdReq) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoById not implemented")
}
func (UnimplementedRbacCenterServer) GetUserInfoByEmail(context.Context, *UserInfoEmailReq) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByEmail not implemented")
}
func (UnimplementedRbacCenterServer) GetUserList(context.Context, *UserListReq) (*UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedRbacCenterServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedRbacCenterServer) UserCreate(context.Context, *UserCreateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (UnimplementedRbacCenterServer) UserUpdate(context.Context, *UserUpdateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedRbacCenterServer) UserDestroy(context.Context, *UserDestroyReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDestroy not implemented")
}
func (UnimplementedRbacCenterServer) RoleCreate(context.Context, *RoleCreateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleCreate not implemented")
}
func (UnimplementedRbacCenterServer) RoleUpdate(context.Context, *RoleUpdateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleUpdate not implemented")
}
func (UnimplementedRbacCenterServer) RoleDestroy(context.Context, *RoleDestroyReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleDestroy not implemented")
}
func (UnimplementedRbacCenterServer) GetRoleInfo(context.Context, *RoleInfo) (*RoleDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleInfo not implemented")
}
func (UnimplementedRbacCenterServer) GetAllRoles(context.Context, *AllRoles) (*AllRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoles not implemented")
}
func (UnimplementedRbacCenterServer) mustEmbedUnimplementedRbacCenterServer() {}

// UnsafeRbacCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RbacCenterServer will
// result in compilation errors.
type UnsafeRbacCenterServer interface {
	mustEmbedUnimplementedRbacCenterServer()
}

func RegisterRbacCenterServer(s grpc.ServiceRegistrar, srv RbacCenterServer) {
	s.RegisterService(&RbacCenter_ServiceDesc, srv)
}

func _RbacCenter_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacCenterServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RbacCenter/GetUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacCenterServer).GetUserInfoById(ctx, req.(*UserInfoIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacCenter_GetUserInfoByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacCenterServer).GetUserInfoByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RbacCenter/GetUserInfoByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacCenterServer).GetUserInfoByEmail(ctx, req.(*UserInfoEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacCenter_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacCenterServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RbacCenter/GetUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacCenterServer).GetUserList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacCenter_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacCenterServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RbacCenter/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacCenterServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacCenter_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacCenterServer).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RbacCenter/UserCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacCenterServer).UserCreate(ctx, req.(*UserCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacCenter_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacCenterServer).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RbacCenter/UserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacCenterServer).UserUpdate(ctx, req.(*UserUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacCenter_UserDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDestroyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacCenterServer).UserDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RbacCenter/UserDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacCenterServer).UserDestroy(ctx, req.(*UserDestroyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacCenter_RoleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacCenterServer).RoleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RbacCenter/RoleCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacCenterServer).RoleCreate(ctx, req.(*RoleCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacCenter_RoleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacCenterServer).RoleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RbacCenter/RoleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacCenterServer).RoleUpdate(ctx, req.(*RoleUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacCenter_RoleDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDestroyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacCenterServer).RoleDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RbacCenter/RoleDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacCenterServer).RoleDestroy(ctx, req.(*RoleDestroyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacCenter_GetRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacCenterServer).GetRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RbacCenter/GetRoleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacCenterServer).GetRoleInfo(ctx, req.(*RoleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacCenter_GetAllRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllRoles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacCenterServer).GetAllRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RbacCenter/GetAllRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacCenterServer).GetAllRoles(ctx, req.(*AllRoles))
	}
	return interceptor(ctx, in, info, handler)
}

// RbacCenter_ServiceDesc is the grpc.ServiceDesc for RbacCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RbacCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rbac.RbacCenter",
	HandlerType: (*RbacCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfoById",
			Handler:    _RbacCenter_GetUserInfoById_Handler,
		},
		{
			MethodName: "GetUserInfoByEmail",
			Handler:    _RbacCenter_GetUserInfoByEmail_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _RbacCenter_GetUserList_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _RbacCenter_Login_Handler,
		},
		{
			MethodName: "UserCreate",
			Handler:    _RbacCenter_UserCreate_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _RbacCenter_UserUpdate_Handler,
		},
		{
			MethodName: "UserDestroy",
			Handler:    _RbacCenter_UserDestroy_Handler,
		},
		{
			MethodName: "RoleCreate",
			Handler:    _RbacCenter_RoleCreate_Handler,
		},
		{
			MethodName: "RoleUpdate",
			Handler:    _RbacCenter_RoleUpdate_Handler,
		},
		{
			MethodName: "RoleDestroy",
			Handler:    _RbacCenter_RoleDestroy_Handler,
		},
		{
			MethodName: "GetRoleInfo",
			Handler:    _RbacCenter_GetRoleInfo_Handler,
		},
		{
			MethodName: "GetAllRoles",
			Handler:    _RbacCenter_GetAllRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/rbac.proto",
}
