// Code generated by goctl. DO NOT EDIT!
// Source: rbac.proto

package rbaccenter

import (
	"context"

	"business/app/rbac/rpc/rbac"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AllRoles         = rbac.AllRoles
	AllRolesResp     = rbac.AllRolesResp
	BaseResp         = rbac.BaseResp
	LoginReq         = rbac.LoginReq
	LoginResp        = rbac.LoginResp
	RoleCreateReq    = rbac.RoleCreateReq
	RoleDestroyReq   = rbac.RoleDestroyReq
	RoleDetail       = rbac.RoleDetail
	RoleInfo         = rbac.RoleInfo
	RoleUpdateReq    = rbac.RoleUpdateReq
	UserCreateReq    = rbac.UserCreateReq
	UserDestroyReq   = rbac.UserDestroyReq
	UserInfoEmailReq = rbac.UserInfoEmailReq
	UserInfoIdReq    = rbac.UserInfoIdReq
	UserInfoResp     = rbac.UserInfoResp
	UserListReq      = rbac.UserListReq
	UserListResp     = rbac.UserListResp
	UserUpdateReq    = rbac.UserUpdateReq

	RbacCenter interface {
		GetUserInfoById(ctx context.Context, in *UserInfoIdReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		GetUserInfoByEmail(ctx context.Context, in *UserInfoEmailReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		GetUserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		UserCreate(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*BaseResp, error)
		UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
		UserDestroy(ctx context.Context, in *UserDestroyReq, opts ...grpc.CallOption) (*BaseResp, error)
		RoleCreate(ctx context.Context, in *RoleCreateReq, opts ...grpc.CallOption) (*BaseResp, error)
		RoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
		RoleDestroy(ctx context.Context, in *RoleDestroyReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetRoleInfo(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*RoleDetail, error)
		GetAllRoles(ctx context.Context, in *AllRoles, opts ...grpc.CallOption) (*AllRolesResp, error)
	}

	defaultRbacCenter struct {
		cli zrpc.Client
	}
)

func NewRbacCenter(cli zrpc.Client) RbacCenter {
	return &defaultRbacCenter{
		cli: cli,
	}
}

func (m *defaultRbacCenter) GetUserInfoById(ctx context.Context, in *UserInfoIdReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := rbac.NewRbacCenterClient(m.cli.Conn())
	return client.GetUserInfoById(ctx, in, opts...)
}

func (m *defaultRbacCenter) GetUserInfoByEmail(ctx context.Context, in *UserInfoEmailReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := rbac.NewRbacCenterClient(m.cli.Conn())
	return client.GetUserInfoByEmail(ctx, in, opts...)
}

func (m *defaultRbacCenter) GetUserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	client := rbac.NewRbacCenterClient(m.cli.Conn())
	return client.GetUserList(ctx, in, opts...)
}

func (m *defaultRbacCenter) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := rbac.NewRbacCenterClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultRbacCenter) UserCreate(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := rbac.NewRbacCenterClient(m.cli.Conn())
	return client.UserCreate(ctx, in, opts...)
}

func (m *defaultRbacCenter) UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := rbac.NewRbacCenterClient(m.cli.Conn())
	return client.UserUpdate(ctx, in, opts...)
}

func (m *defaultRbacCenter) UserDestroy(ctx context.Context, in *UserDestroyReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := rbac.NewRbacCenterClient(m.cli.Conn())
	return client.UserDestroy(ctx, in, opts...)
}

func (m *defaultRbacCenter) RoleCreate(ctx context.Context, in *RoleCreateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := rbac.NewRbacCenterClient(m.cli.Conn())
	return client.RoleCreate(ctx, in, opts...)
}

func (m *defaultRbacCenter) RoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := rbac.NewRbacCenterClient(m.cli.Conn())
	return client.RoleUpdate(ctx, in, opts...)
}

func (m *defaultRbacCenter) RoleDestroy(ctx context.Context, in *RoleDestroyReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := rbac.NewRbacCenterClient(m.cli.Conn())
	return client.RoleDestroy(ctx, in, opts...)
}

func (m *defaultRbacCenter) GetRoleInfo(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*RoleDetail, error) {
	client := rbac.NewRbacCenterClient(m.cli.Conn())
	return client.GetRoleInfo(ctx, in, opts...)
}

func (m *defaultRbacCenter) GetAllRoles(ctx context.Context, in *AllRoles, opts ...grpc.CallOption) (*AllRolesResp, error) {
	client := rbac.NewRbacCenterClient(m.cli.Conn())
	return client.GetAllRoles(ctx, in, opts...)
}
