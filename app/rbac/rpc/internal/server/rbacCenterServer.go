// Code generated by goctl. DO NOT EDIT!
// Source: rbac.proto

package server

import (
	"context"

	"business/app/rbac/rpc/internal/logic"
	"business/app/rbac/rpc/internal/svc"
	"business/app/rbac/rpc/rbac"
)

type RbacCenterServer struct {
	svcCtx *svc.ServiceContext
	rbac.UnimplementedRbacCenterServer
}

func NewRbacCenterServer(svcCtx *svc.ServiceContext) *RbacCenterServer {
	return &RbacCenterServer{
		svcCtx: svcCtx,
	}
}

func (s *RbacCenterServer) GetUserInfoById(ctx context.Context, in *rbac.UserInfoIdReq) (*rbac.UserInfoResp, error) {
	l := logic.NewGetUserInfoByIdLogic(ctx, s.svcCtx)
	return l.GetUserInfoById(in)
}

func (s *RbacCenterServer) GetUserInfoByEmail(ctx context.Context, in *rbac.UserInfoEmailReq) (*rbac.UserInfoResp, error) {
	l := logic.NewGetUserInfoByEmailLogic(ctx, s.svcCtx)
	return l.GetUserInfoByEmail(in)
}

func (s *RbacCenterServer) GetUserList(ctx context.Context, in *rbac.UserListReq) (*rbac.UserListResp, error) {
	l := logic.NewGetUserListLogic(ctx, s.svcCtx)
	return l.GetUserList(in)
}

func (s *RbacCenterServer) Login(ctx context.Context, in *rbac.LoginReq) (*rbac.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *RbacCenterServer) UserCreate(ctx context.Context, in *rbac.UserCreateReq) (*rbac.BaseResp, error) {
	l := logic.NewUserCreateLogic(ctx, s.svcCtx)
	return l.UserCreate(in)
}

func (s *RbacCenterServer) UserUpdate(ctx context.Context, in *rbac.UserUpdateReq) (*rbac.BaseResp, error) {
	l := logic.NewUserUpdateLogic(ctx, s.svcCtx)
	return l.UserUpdate(in)
}

func (s *RbacCenterServer) UserDestroy(ctx context.Context, in *rbac.UserDestroyReq) (*rbac.BaseResp, error) {
	l := logic.NewUserDestroyLogic(ctx, s.svcCtx)
	return l.UserDestroy(in)
}

func (s *RbacCenterServer) RoleCreate(ctx context.Context, in *rbac.RoleCreateReq) (*rbac.BaseResp, error) {
	l := logic.NewRoleCreateLogic(ctx, s.svcCtx)
	return l.RoleCreate(in)
}

func (s *RbacCenterServer) RoleUpdate(ctx context.Context, in *rbac.RoleUpdateReq) (*rbac.BaseResp, error) {
	l := logic.NewRoleUpdateLogic(ctx, s.svcCtx)
	return l.RoleUpdate(in)
}

func (s *RbacCenterServer) RoleDestroy(ctx context.Context, in *rbac.RoleDestroyReq) (*rbac.BaseResp, error) {
	l := logic.NewRoleDestroyLogic(ctx, s.svcCtx)
	return l.RoleDestroy(in)
}

func (s *RbacCenterServer) GetRoleInfo(ctx context.Context, in *rbac.RoleInfo) (*rbac.RoleDetail, error) {
	l := logic.NewGetRoleInfoLogic(ctx, s.svcCtx)
	return l.GetRoleInfo(in)
}

func (s *RbacCenterServer) GetAllRoles(ctx context.Context, in *rbac.AllRoles) (*rbac.AllRolesResp, error) {
	l := logic.NewGetAllRolesLogic(ctx, s.svcCtx)
	return l.GetAllRoles(in)
}
