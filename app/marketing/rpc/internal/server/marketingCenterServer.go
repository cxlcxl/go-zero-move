// Code generated by goctl. DO NOT EDIT!
// Source: marketing.proto

package server

import (
	"context"

	"business/app/marketing/rpc/internal/logic"
	"business/app/marketing/rpc/internal/svc"
	"business/app/marketing/rpc/marketing"
)

type MarketingCenterServer struct {
	svcCtx *svc.ServiceContext
	marketing.UnimplementedMarketingCenterServer
}

func NewMarketingCenterServer(svcCtx *svc.ServiceContext) *MarketingCenterServer {
	return &MarketingCenterServer{
		svcCtx: svcCtx,
	}
}

func (s *MarketingCenterServer) CampaignCreate(ctx context.Context, in *marketing.CampaignCreateReq) (*marketing.BaseResp, error) {
	l := logic.NewCampaignCreateLogic(ctx, s.svcCtx)
	return l.CampaignCreate(in)
}

func (s *MarketingCenterServer) CampaignList(ctx context.Context, in *marketing.CampaignListReq) (*marketing.CampaignListResp, error) {
	l := logic.NewCampaignListLogic(ctx, s.svcCtx)
	return l.CampaignList(in)
}

func (s *MarketingCenterServer) CampaignUpdate(ctx context.Context, in *marketing.CampaignUpdateReq) (*marketing.BaseResp, error) {
	l := logic.NewCampaignUpdateLogic(ctx, s.svcCtx)
	return l.CampaignUpdate(in)
}

func (s *MarketingCenterServer) GetCampaignInfo(ctx context.Context, in *marketing.CampaignInfoReq) (*marketing.CampaignInfo, error) {
	l := logic.NewGetCampaignInfoLogic(ctx, s.svcCtx)
	return l.GetCampaignInfo(in)
}

func (s *MarketingCenterServer) DictQuery(ctx context.Context, in *marketing.DictionaryReq) (*marketing.DictionaryResp, error) {
	l := logic.NewDictQueryLogic(ctx, s.svcCtx)
	return l.DictQuery(in)
}

func (s *MarketingCenterServer) Continents(ctx context.Context, in *marketing.EmptyParamsReq) (*marketing.ContinentResp, error) {
	l := logic.NewContinentsLogic(ctx, s.svcCtx)
	return l.Continents(in)
}

func (s *MarketingCenterServer) GetCountries(ctx context.Context, in *marketing.EmptyParamsReq) (*marketing.CountriesResp, error) {
	l := logic.NewGetCountriesLogic(ctx, s.svcCtx)
	return l.GetCountries(in)
}

func (s *MarketingCenterServer) TargetingCreate(ctx context.Context, in *marketing.Targeting) (*marketing.BaseResp, error) {
	l := logic.NewTargetingCreateLogic(ctx, s.svcCtx)
	return l.TargetingCreate(in)
}

func (s *MarketingCenterServer) TargetingList(ctx context.Context, in *marketing.TargetingListReq) (*marketing.TargetingListResp, error) {
	l := logic.NewTargetingListLogic(ctx, s.svcCtx)
	return l.TargetingList(in)
}

func (s *MarketingCenterServer) GetTargetingByName(ctx context.Context, in *marketing.GetTargetingByNameReq) (*marketing.Targeting, error) {
	l := logic.NewGetTargetingByNameLogic(ctx, s.svcCtx)
	return l.GetTargetingByName(in)
}

func (s *MarketingCenterServer) GetTargetingByTargetingId(ctx context.Context, in *marketing.GetTargetingByTargetingIdReq) (*marketing.Targeting, error) {
	l := logic.NewGetTargetingByTargetingIdLogic(ctx, s.svcCtx)
	return l.GetTargetingByTargetingId(in)
}

func (s *MarketingCenterServer) GetPositions(ctx context.Context, in *marketing.PositionListReq) (*marketing.PositionListResp, error) {
	l := logic.NewGetPositionsLogic(ctx, s.svcCtx)
	return l.GetPositions(in)
}

func (s *MarketingCenterServer) GetPositionInfo(ctx context.Context, in *marketing.CreativeSizeInfoReq) (*marketing.CreativeSizeInfoResp, error) {
	l := logic.NewGetPositionInfoLogic(ctx, s.svcCtx)
	return l.GetPositionInfo(in)
}

func (s *MarketingCenterServer) BatchInsertAsset(ctx context.Context, in *marketing.BatchInsertAssetReq) (*marketing.BaseResp, error) {
	l := logic.NewBatchInsertAssetLogic(ctx, s.svcCtx)
	return l.BatchInsertAsset(in)
}

func (s *MarketingCenterServer) AssetList(ctx context.Context, in *marketing.AssetListReq) (*marketing.AssetListResp, error) {
	l := logic.NewAssetListLogic(ctx, s.svcCtx)
	return l.AssetList(in)
}

func (s *MarketingCenterServer) DeleteAssets(ctx context.Context, in *marketing.AssetDeleteReq) (*marketing.BaseResp, error) {
	l := logic.NewDeleteAssetsLogic(ctx, s.svcCtx)
	return l.DeleteAssets(in)
}

func (s *MarketingCenterServer) BindAsset(ctx context.Context, in *marketing.AssetBindReq) (*marketing.BaseResp, error) {
	l := logic.NewBindAssetLogic(ctx, s.svcCtx)
	return l.BindAsset(in)
}

func (s *MarketingCenterServer) TrackingList(ctx context.Context, in *marketing.TrackingListReq) (*marketing.TrackingListResp, error) {
	l := logic.NewTrackingListLogic(ctx, s.svcCtx)
	return l.TrackingList(in)
}

func (s *MarketingCenterServer) BatchInsertTracking(ctx context.Context, in *marketing.BatchInsertTrackingReq) (*marketing.BaseResp, error) {
	l := logic.NewBatchInsertTrackingLogic(ctx, s.svcCtx)
	return l.BatchInsertTracking(in)
}
