// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	positionElementsFieldNames        = builder.RawFieldNames(&PositionElements{})
	positionElementsRows              = strings.Join(positionElementsFieldNames, ",")
	positionElementsRowsExpectAutoSet = strings.Join(stringx.Remove(positionElementsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
)

type (
	positionElementsModel interface {
		FindOne(ctx context.Context, id int64) (*PositionElements, error)
		FindOneByCreativeSizeIdSubType(ctx context.Context, creativeSizeId string, subType string) (*PositionElements, error)
		Delete(ctx context.Context, id int64) error
	}

	defaultPositionElementsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PositionElements struct {
		Id              int64  `db:"id"`
		CreativeSizeId  string `db:"creative_size_id"`   // 版位ID
		SubType         string `db:"sub_type"`           // 版位子形式
		GroupNumber     int64  `db:"group_number"`       // 版位子形式分组
		ElementId       string `db:"element_id"`         // 版位元素id
		ElementName     string `db:"element_name"`       // 版位元素类型
		ElementTitle    string `db:"element_title"`      // 版位元素名称
		ElementCaption  string `db:"element_caption"`    // 版位元素描述
		Width           int64  `db:"width"`              // 图片宽
		Height          int64  `db:"height"`             // 图片高
		MinWidth        int64  `db:"min_width"`          // 视频最小宽度
		MinHeight       int64  `db:"min_height"`         // 视频最小高度
		MinLength       int64  `db:"min_length"`         // 最小输入长度
		MaxLength       int64  `db:"max_length"`         // 文案、摘要、品牌名称，都是指中文长度，英文长度
		FileSizeKbLimit int64  `db:"file_size_kb_limit"` // 文件大小上限，单位KB
		GifSizeKbLimit  int64  `db:"gif_size_kb_limit"`  // Gif文件大小上限，单位KB
		FileFormat      string `db:"file_format"`        // 文件类型
		Pattern         string `db:"pattern"`            // 输入校验规则
		Duration        string `db:"duration"`           // 视频时长
		MinOccurs       string `db:"min_occurs"`         // 最小出现次数，为0表示元素为可选
		MaxOccurs       string `db:"max_occurs"`         // 最大出现次数
	}
)

func newPositionElementsModel(conn sqlx.SqlConn) *defaultPositionElementsModel {
	return &defaultPositionElementsModel{
		conn:  conn,
		table: "`position_elements`",
	}
}

func (m *defaultPositionElementsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPositionElementsModel) FindOne(ctx context.Context, id int64) (*PositionElements, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", positionElementsRows, m.table)
	var resp PositionElements
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPositionElementsModel) FindOneByCreativeSizeIdSubType(ctx context.Context, creativeSizeId string, subType string) (*PositionElements, error) {
	var resp PositionElements
	query := fmt.Sprintf("select %s from %s where `creative_size_id` = ? and `sub_type` = ? limit 1", positionElementsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, creativeSizeId, subType)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPositionElementsModel) tableName() string {
	return m.table
}
