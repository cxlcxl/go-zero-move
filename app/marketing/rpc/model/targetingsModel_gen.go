// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	targetingsFieldNames          = builder.RawFieldNames(&Targetings{})
	targetingsRows                = strings.Join(targetingsFieldNames, ",")
	targetingsRowsExpectAutoSet   = strings.Join(stringx.Remove(targetingsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	targetingsRowsWithPlaceHolder = strings.Join(stringx.Remove(targetingsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	targetingsModel interface {
		Insert(ctx context.Context, data *Targetings) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Targetings, error)
		FindOneByTargetingId(ctx context.Context, targetingId int64) (*Targetings, error)
		FindOneByTargetingName(ctx context.Context, targetingName string) (*Targetings, error)
		Update(ctx context.Context, newData *Targetings) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTargetingsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Targetings struct {
		Id                 int64     `db:"id"`
		AccountId          int64     `db:"account_id"`
		AdvertiserId       string    `db:"advertiser_id"` // 广告主账户ID
		TargetingId        int64     `db:"targeting_id"`
		TargetingName      string    `db:"targeting_name"`        // 定向名称
		TargetingType      string    `db:"targeting_type"`        // 定向类型
		LocationType       string    `db:"location_type"`         // 地域定向类型
		IncludeLocation    string    `db:"include_location"`      // 地域 - 包含
		ExcludeLocation    string    `db:"exclude_location"`      // 地域 - 排除
		Carriers           string    `db:"carriers"`              // 运营商
		Language           string    `db:"language"`              // 语言
		Age                string    `db:"age"`                   // 年龄
		Gender             string    `db:"gender"`                // 性别
		AppCategory        string    `db:"app_category"`          // App 行为类型
		AppCategories      string    `db:"app_categories"`        // App 行为
		InstalledApps      string    `db:"installed_apps"`        // app 安装
		AppInterest        string    `db:"app_interest"`          // App 兴趣类型
		AppInterests       string    `db:"app_interests"`         // App 兴趣
		Series             string    `db:"series"`                // 设备
		NetworkType        string    `db:"network_type"`          // 联网方式
		NotAudiences       string    `db:"not_audiences"`         // 排除人群
		Audiences          string    `db:"audiences"`             // 包含人群
		AppCategoryOfMedia string    `db:"app_category_of_media"` // 媒体类型
		CreatedAt          time.Time `db:"created_at"`            // 添加时间
		UpdatedAt          time.Time `db:"updated_at"`            // 最后一次修改时间
	}
)

func newTargetingsModel(conn sqlx.SqlConn) *defaultTargetingsModel {
	return &defaultTargetingsModel{
		conn:  conn,
		table: "`targetings`",
	}
}

func (m *defaultTargetingsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTargetingsModel) FindOne(ctx context.Context, id int64) (*Targetings, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", targetingsRows, m.table)
	var resp Targetings
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTargetingsModel) FindOneByTargetingId(ctx context.Context, targetingId int64) (*Targetings, error) {
	var resp Targetings
	query := fmt.Sprintf("select %s from %s where `targeting_id` = ? limit 1", targetingsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, targetingId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTargetingsModel) FindOneByTargetingName(ctx context.Context, targetingName string) (*Targetings, error) {
	var resp Targetings
	query := fmt.Sprintf("select %s from %s where `targeting_name` = ? limit 1", targetingsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, targetingName)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTargetingsModel) Insert(ctx context.Context, data *Targetings) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, targetingsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AccountId, data.AdvertiserId, data.TargetingId, data.TargetingName, data.TargetingType, data.LocationType, data.IncludeLocation, data.ExcludeLocation, data.Carriers, data.Language, data.Age, data.Gender, data.AppCategory, data.AppCategories, data.InstalledApps, data.AppInterest, data.AppInterests, data.Series, data.NetworkType, data.NotAudiences, data.Audiences, data.AppCategoryOfMedia, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultTargetingsModel) Update(ctx context.Context, newData *Targetings) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, targetingsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.AccountId, newData.AdvertiserId, newData.TargetingId, newData.TargetingName, newData.TargetingType, newData.LocationType, newData.IncludeLocation, newData.ExcludeLocation, newData.Carriers, newData.Language, newData.Age, newData.Gender, newData.AppCategory, newData.AppCategories, newData.InstalledApps, newData.AppInterest, newData.AppInterests, newData.Series, newData.NetworkType, newData.NotAudiences, newData.Audiences, newData.AppCategoryOfMedia, newData.CreatedAt, newData.UpdatedAt, newData.Id)
	return err
}

func (m *defaultTargetingsModel) tableName() string {
	return m.table
}
