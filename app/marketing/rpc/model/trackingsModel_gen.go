// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	trackingsFieldNames          = builder.RawFieldNames(&Trackings{})
	trackingsRows                = strings.Join(trackingsFieldNames, ",")
	trackingsRowsExpectAutoSet   = strings.Join(stringx.Remove(trackingsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	trackingsRowsWithPlaceHolder = strings.Join(stringx.Remove(trackingsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	trackingsModel interface {
		Insert(ctx context.Context, data *Trackings) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Trackings, error)
		Update(ctx context.Context, newData *Trackings) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTrackingsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Trackings struct {
		Id               int64  `db:"id"`
		AccountId        int64  `db:"account_id"`         // 账户ID;对应 accounts 表的id字段
		AdvertiserId     string `db:"advertiser_id"`      // 广告主账户ID
		AppId            string `db:"app_id"`             // 第三方应用ID，例如华为APP ID : C10134672；可能存在GP的应用ID 32位
		TrackingId       int64  `db:"tracking_id"`        // 转化跟踪指标ID
		EffectType       string `db:"effect_type"`        // 转化目标
		EffectName       string `db:"effect_name"`        // 转化跟踪指标名称
		ClickTrackingUrl string `db:"click_tracking_url"` // 点击监测地址
		ImpTrackingUrl   string `db:"imp_tracking_url"`   // 曝光监测地址
	}
)

func newTrackingsModel(conn sqlx.SqlConn) *defaultTrackingsModel {
	return &defaultTrackingsModel{
		conn:  conn,
		table: "`trackings`",
	}
}

func (m *defaultTrackingsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTrackingsModel) FindOne(ctx context.Context, id int64) (*Trackings, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", trackingsRows, m.table)
	var resp Trackings
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTrackingsModel) Insert(ctx context.Context, data *Trackings) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, trackingsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AccountId, data.AdvertiserId, data.AppId, data.TrackingId, data.EffectType, data.EffectName, data.ClickTrackingUrl, data.ImpTrackingUrl)
	return ret, err
}

func (m *defaultTrackingsModel) Update(ctx context.Context, data *Trackings) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, trackingsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.AccountId, data.AdvertiserId, data.AppId, data.TrackingId, data.EffectType, data.EffectName, data.ClickTrackingUrl, data.ImpTrackingUrl, data.Id)
	return err
}

func (m *defaultTrackingsModel) tableName() string {
	return m.table
}
