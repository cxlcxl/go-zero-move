// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	overseasRegionsFieldNames          = builder.RawFieldNames(&OverseasRegions{})
	overseasRegionsRows                = strings.Join(overseasRegionsFieldNames, ",")
	overseasRegionsRowsExpectAutoSet   = strings.Join(stringx.Remove(overseasRegionsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	overseasRegionsRowsWithPlaceHolder = strings.Join(stringx.Remove(overseasRegionsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	overseasRegionsModel interface {
		Insert(ctx context.Context, data *OverseasRegions) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OverseasRegions, error)
		FindOneById(ctx context.Context, id int64) (*OverseasRegions, error)
		Update(ctx context.Context, newData *OverseasRegions) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOverseasRegionsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OverseasRegions struct {
		Id          int64  `db:"id"`
		CId         string `db:"c_id"`
		Pid         string `db:"pid"`
		CCode       string `db:"c_code"`
		CName       string `db:"c_name"`
		Level       int64  `db:"level"`
		ContinentId int64  `db:"continent_id"`
	}
)

func newOverseasRegionsModel(conn sqlx.SqlConn) *defaultOverseasRegionsModel {
	return &defaultOverseasRegionsModel{
		conn:  conn,
		table: "`overseas_regions`",
	}
}

func (m *defaultOverseasRegionsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOverseasRegionsModel) FindOne(ctx context.Context, id int64) (*OverseasRegions, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", overseasRegionsRows, m.table)
	var resp OverseasRegions
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOverseasRegionsModel) FindOneById(ctx context.Context, id int64) (*OverseasRegions, error) {
	var resp OverseasRegions
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", overseasRegionsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOverseasRegionsModel) Insert(ctx context.Context, data *OverseasRegions) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, overseasRegionsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CId, data.Pid, data.CCode, data.CName, data.Level)
	return ret, err
}

func (m *defaultOverseasRegionsModel) Update(ctx context.Context, newData *OverseasRegions) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, overseasRegionsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.CId, newData.Pid, newData.CCode, newData.CName, newData.Level, newData.Id)
	return err
}

func (m *defaultOverseasRegionsModel) tableName() string {
	return m.table
}
