// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	assetsFieldNames          = builder.RawFieldNames(&Assets{})
	assetsRows                = strings.Join(assetsFieldNames, ",")
	assetsRowsExpectAutoSet   = strings.Join(stringx.Remove(assetsFieldNames, "`id`"), ",")
	assetsRowsWithPlaceHolder = strings.Join(stringx.Remove(assetsFieldNames, "`id`"), "=?,") + "=?"
)

type (
	assetsModel interface {
		Insert(ctx context.Context, data *Assets) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Assets, error)
		FindOneByAssetId(ctx context.Context, assetId int64) (*Assets, error)
		Update(ctx context.Context, newData *Assets) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAssetsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Assets struct {
		Id                int64  `db:"id"`
		AccountId         int64  `db:"account_id"`    // 账户 ID
		AdvertiserId      string `db:"advertiser_id"` // 广告主账户 ID
		AppId             string `db:"app_id"`        // 第三方应用ID，例如华为APP ID : C10134672；可能存在GP的应用ID 32位
		AssetId           int64  `db:"asset_id"`
		AssetName         string `db:"asset_name"`
		AssetType         string `db:"asset_type"`
		FileUrl           string `db:"file_url"`
		Width             int64  `db:"width"`
		Height            int64  `db:"height"`
		VideoPlayDuration int64  `db:"video_play_duration"`
		FileSize          int64  `db:"file_size"`
		FileFormat        string `db:"file_format"`
		FileHashSha256    string `db:"file_hash_sha256"`
	}
)

func newAssetsModel(conn sqlx.SqlConn) *defaultAssetsModel {
	return &defaultAssetsModel{
		conn:  conn,
		table: "`assets`",
	}
}

func (m *defaultAssetsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAssetsModel) FindOne(ctx context.Context, id int64) (*Assets, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", assetsRows, m.table)
	var resp Assets
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAssetsModel) FindOneByAssetId(ctx context.Context, assetId int64) (*Assets, error) {
	var resp Assets
	query := fmt.Sprintf("select %s from %s where `asset_id` = ? limit 1", assetsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, assetId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAssetsModel) Insert(ctx context.Context, data *Assets) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, assetsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AccountId, data.AdvertiserId, data.AppId, data.AssetId, data.AssetName, data.AssetType, data.FileUrl, data.Width, data.Height, data.VideoPlayDuration, data.FileSize, data.FileFormat, data.FileHashSha256)
	return ret, err
}

func (m *defaultAssetsModel) Update(ctx context.Context, newData *Assets) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, assetsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.AccountId, newData.AdvertiserId, newData.AppId, newData.AssetId, newData.AssetName, newData.AssetType, newData.FileUrl, newData.Width, newData.Height, newData.VideoPlayDuration, newData.FileSize, newData.FileFormat, newData.FileHashSha256, newData.Id)
	return err
}

func (m *defaultAssetsModel) tableName() string {
	return m.table
}
