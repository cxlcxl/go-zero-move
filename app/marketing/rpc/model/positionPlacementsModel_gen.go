// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	positionPlacementsFieldNames          = builder.RawFieldNames(&PositionPlacements{})
	positionPlacementsRows                = strings.Join(positionPlacementsFieldNames, ",")
	positionPlacementsRowsExpectAutoSet   = strings.Join(stringx.Remove(positionPlacementsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	positionPlacementsRowsWithPlaceHolder = strings.Join(stringx.Remove(positionPlacementsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	positionPlacementsModel interface {
		Insert(ctx context.Context, data *PositionPlacements) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PositionPlacements, error)
		Update(ctx context.Context, newData *PositionPlacements) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPositionPlacementsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PositionPlacements struct {
		Id                         int64  `db:"id"`
		CreativeSizeId             string `db:"creative_size_id"`              // 版位ID
		PlacementSizeId            string `db:"placement_size_id"`             // 规格ID
		CreativeSize               string `db:"creative_size"`                 // 尺寸
		CreativeSizeSubType        string `db:"creative_size_sub_type"`        // 版位子形式
		IsSupportMultipleCreatives string `db:"is_support_multiple_creatives"` // 是否支持多创意
	}
)

func newPositionPlacementsModel(conn sqlx.SqlConn) *defaultPositionPlacementsModel {
	return &defaultPositionPlacementsModel{
		conn:  conn,
		table: "`position_placements`",
	}
}

func (m *defaultPositionPlacementsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPositionPlacementsModel) FindOne(ctx context.Context, id int64) (*PositionPlacements, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", positionPlacementsRows, m.table)
	var resp PositionPlacements
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPositionPlacementsModel) Insert(ctx context.Context, data *PositionPlacements) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, positionPlacementsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CreativeSizeId, data.PlacementSizeId, data.CreativeSize, data.CreativeSizeSubType, data.IsSupportMultipleCreatives)
	return ret, err
}

func (m *defaultPositionPlacementsModel) Update(ctx context.Context, data *PositionPlacements) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, positionPlacementsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CreativeSizeId, data.PlacementSizeId, data.CreativeSize, data.CreativeSizeSubType, data.IsSupportMultipleCreatives, data.Id)
	return err
}

func (m *defaultPositionPlacementsModel) tableName() string {
	return m.table
}
