// Code generated by goctl. DO NOT EDIT!
// Source: marketing.proto

package marketingcenter

import (
	"context"

	"business/app/marketing/rpc/marketing"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Asset                               = marketing.Asset
	AssetBindReq                        = marketing.AssetBindReq
	AssetDeleteReq                      = marketing.AssetDeleteReq
	AssetListReq                        = marketing.AssetListReq
	AssetListResp                       = marketing.AssetListResp
	BaseResp                            = marketing.BaseResp
	BatchInsertAssetReq                 = marketing.BatchInsertAssetReq
	BatchInsertTrackingReq              = marketing.BatchInsertTrackingReq
	CampaignBindAppReq                  = marketing.CampaignBindAppReq
	CampaignCreateReq                   = marketing.CampaignCreateReq
	CampaignInfo                        = marketing.CampaignInfo
	CampaignInfoReq                     = marketing.CampaignInfoReq
	CampaignListReq                     = marketing.CampaignListReq
	CampaignListResp                    = marketing.CampaignListResp
	CampaignUpdateReq                   = marketing.CampaignUpdateReq
	ContinentResp                       = marketing.ContinentResp
	ContinentResp_Continent             = marketing.ContinentResp_Continent
	CountriesResp                       = marketing.CountriesResp
	CountriesResp_OverseasRegionCountry = marketing.CountriesResp_OverseasRegionCountry
	CreativeSizeInfo                    = marketing.CreativeSizeInfo
	CreativeSizeInfoReq                 = marketing.CreativeSizeInfoReq
	CreativeSizeInfoResp                = marketing.CreativeSizeInfoResp
	CreativeSizePlacement               = marketing.CreativeSizePlacement
	CreativeSizeSample                  = marketing.CreativeSizeSample
	DictionaryReq                       = marketing.DictionaryReq
	DictionaryResp                      = marketing.DictionaryResp
	DictionaryResp_Dictionary           = marketing.DictionaryResp_Dictionary
	EmptyParamsReq                      = marketing.EmptyParamsReq
	GetTargetingByNameReq               = marketing.GetTargetingByNameReq
	GetTargetingByTargetingIdReq        = marketing.GetTargetingByTargetingIdReq
	PositionElementReq                  = marketing.PositionElementReq
	PositionElementResp                 = marketing.PositionElementResp
	PositionElementResp_Element         = marketing.PositionElementResp_Element
	PositionListReq                     = marketing.PositionListReq
	PositionListResp                    = marketing.PositionListResp
	PositionPlacementReq                = marketing.PositionPlacementReq
	PositionPlacementResp               = marketing.PositionPlacementResp
	PositionPlacementResp_Placement     = marketing.PositionPlacementResp_Placement
	PositionPriceReq                    = marketing.PositionPriceReq
	PositionPriceResp                   = marketing.PositionPriceResp
	Targeting                           = marketing.Targeting
	TargetingListReq                    = marketing.TargetingListReq
	TargetingListResp                   = marketing.TargetingListResp
	Tracking                            = marketing.Tracking
	TrackingListReq                     = marketing.TrackingListReq
	TrackingListResp                    = marketing.TrackingListResp
	TrackingListResp_Tracking           = marketing.TrackingListResp_Tracking

	MarketingCenter interface {
		CampaignCreate(ctx context.Context, in *CampaignCreateReq, opts ...grpc.CallOption) (*BaseResp, error)
		CampaignList(ctx context.Context, in *CampaignListReq, opts ...grpc.CallOption) (*CampaignListResp, error)
		CampaignUpdate(ctx context.Context, in *CampaignUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetCampaignInfo(ctx context.Context, in *CampaignInfoReq, opts ...grpc.CallOption) (*CampaignInfo, error)
		CampaignBindApp(ctx context.Context, in *CampaignBindAppReq, opts ...grpc.CallOption) (*BaseResp, error)
		DictQuery(ctx context.Context, in *DictionaryReq, opts ...grpc.CallOption) (*DictionaryResp, error)
		Continents(ctx context.Context, in *EmptyParamsReq, opts ...grpc.CallOption) (*ContinentResp, error)
		GetCountries(ctx context.Context, in *EmptyParamsReq, opts ...grpc.CallOption) (*CountriesResp, error)
		TargetingCreate(ctx context.Context, in *Targeting, opts ...grpc.CallOption) (*BaseResp, error)
		TargetingList(ctx context.Context, in *TargetingListReq, opts ...grpc.CallOption) (*TargetingListResp, error)
		GetTargetingByName(ctx context.Context, in *GetTargetingByNameReq, opts ...grpc.CallOption) (*Targeting, error)
		GetTargetingByTargetingId(ctx context.Context, in *GetTargetingByTargetingIdReq, opts ...grpc.CallOption) (*Targeting, error)
		BatchInsertAsset(ctx context.Context, in *BatchInsertAssetReq, opts ...grpc.CallOption) (*BaseResp, error)
		AssetList(ctx context.Context, in *AssetListReq, opts ...grpc.CallOption) (*AssetListResp, error)
		DeleteAssets(ctx context.Context, in *AssetDeleteReq, opts ...grpc.CallOption) (*BaseResp, error)
		BindAsset(ctx context.Context, in *AssetBindReq, opts ...grpc.CallOption) (*BaseResp, error)
		TrackingList(ctx context.Context, in *TrackingListReq, opts ...grpc.CallOption) (*TrackingListResp, error)
		BatchInsertTracking(ctx context.Context, in *BatchInsertTrackingReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetPositions(ctx context.Context, in *PositionListReq, opts ...grpc.CallOption) (*PositionListResp, error)
		GetPositionInfo(ctx context.Context, in *CreativeSizeInfoReq, opts ...grpc.CallOption) (*CreativeSizeInfoResp, error)
		GetPositionPrice(ctx context.Context, in *PositionPriceReq, opts ...grpc.CallOption) (*PositionPriceResp, error)
		GetPositionPlacement(ctx context.Context, in *PositionPlacementReq, opts ...grpc.CallOption) (*PositionPlacementResp, error)
		GetPositionElement(ctx context.Context, in *PositionElementReq, opts ...grpc.CallOption) (*PositionElementResp, error)
	}

	defaultMarketingCenter struct {
		cli zrpc.Client
	}
)

func NewMarketingCenter(cli zrpc.Client) MarketingCenter {
	return &defaultMarketingCenter{
		cli: cli,
	}
}

func (m *defaultMarketingCenter) CampaignCreate(ctx context.Context, in *CampaignCreateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.CampaignCreate(ctx, in, opts...)
}

func (m *defaultMarketingCenter) CampaignList(ctx context.Context, in *CampaignListReq, opts ...grpc.CallOption) (*CampaignListResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.CampaignList(ctx, in, opts...)
}

func (m *defaultMarketingCenter) CampaignUpdate(ctx context.Context, in *CampaignUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.CampaignUpdate(ctx, in, opts...)
}

func (m *defaultMarketingCenter) GetCampaignInfo(ctx context.Context, in *CampaignInfoReq, opts ...grpc.CallOption) (*CampaignInfo, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.GetCampaignInfo(ctx, in, opts...)
}

func (m *defaultMarketingCenter) CampaignBindApp(ctx context.Context, in *CampaignBindAppReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.CampaignBindApp(ctx, in, opts...)
}

func (m *defaultMarketingCenter) DictQuery(ctx context.Context, in *DictionaryReq, opts ...grpc.CallOption) (*DictionaryResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.DictQuery(ctx, in, opts...)
}

func (m *defaultMarketingCenter) Continents(ctx context.Context, in *EmptyParamsReq, opts ...grpc.CallOption) (*ContinentResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.Continents(ctx, in, opts...)
}

func (m *defaultMarketingCenter) GetCountries(ctx context.Context, in *EmptyParamsReq, opts ...grpc.CallOption) (*CountriesResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.GetCountries(ctx, in, opts...)
}

func (m *defaultMarketingCenter) TargetingCreate(ctx context.Context, in *Targeting, opts ...grpc.CallOption) (*BaseResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.TargetingCreate(ctx, in, opts...)
}

func (m *defaultMarketingCenter) TargetingList(ctx context.Context, in *TargetingListReq, opts ...grpc.CallOption) (*TargetingListResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.TargetingList(ctx, in, opts...)
}

func (m *defaultMarketingCenter) GetTargetingByName(ctx context.Context, in *GetTargetingByNameReq, opts ...grpc.CallOption) (*Targeting, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.GetTargetingByName(ctx, in, opts...)
}

func (m *defaultMarketingCenter) GetTargetingByTargetingId(ctx context.Context, in *GetTargetingByTargetingIdReq, opts ...grpc.CallOption) (*Targeting, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.GetTargetingByTargetingId(ctx, in, opts...)
}

func (m *defaultMarketingCenter) BatchInsertAsset(ctx context.Context, in *BatchInsertAssetReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.BatchInsertAsset(ctx, in, opts...)
}

func (m *defaultMarketingCenter) AssetList(ctx context.Context, in *AssetListReq, opts ...grpc.CallOption) (*AssetListResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.AssetList(ctx, in, opts...)
}

func (m *defaultMarketingCenter) DeleteAssets(ctx context.Context, in *AssetDeleteReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.DeleteAssets(ctx, in, opts...)
}

func (m *defaultMarketingCenter) BindAsset(ctx context.Context, in *AssetBindReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.BindAsset(ctx, in, opts...)
}

func (m *defaultMarketingCenter) TrackingList(ctx context.Context, in *TrackingListReq, opts ...grpc.CallOption) (*TrackingListResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.TrackingList(ctx, in, opts...)
}

func (m *defaultMarketingCenter) BatchInsertTracking(ctx context.Context, in *BatchInsertTrackingReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.BatchInsertTracking(ctx, in, opts...)
}

func (m *defaultMarketingCenter) GetPositions(ctx context.Context, in *PositionListReq, opts ...grpc.CallOption) (*PositionListResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.GetPositions(ctx, in, opts...)
}

func (m *defaultMarketingCenter) GetPositionInfo(ctx context.Context, in *CreativeSizeInfoReq, opts ...grpc.CallOption) (*CreativeSizeInfoResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.GetPositionInfo(ctx, in, opts...)
}

func (m *defaultMarketingCenter) GetPositionPrice(ctx context.Context, in *PositionPriceReq, opts ...grpc.CallOption) (*PositionPriceResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.GetPositionPrice(ctx, in, opts...)
}

func (m *defaultMarketingCenter) GetPositionPlacement(ctx context.Context, in *PositionPlacementReq, opts ...grpc.CallOption) (*PositionPlacementResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.GetPositionPlacement(ctx, in, opts...)
}

func (m *defaultMarketingCenter) GetPositionElement(ctx context.Context, in *PositionElementReq, opts ...grpc.CallOption) (*PositionElementResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.GetPositionElement(ctx, in, opts...)
}
