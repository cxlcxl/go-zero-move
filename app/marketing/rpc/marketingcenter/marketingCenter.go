// Code generated by goctl. DO NOT EDIT!
// Source: marketing.proto

package marketingcenter

import (
	"context"

	"business/app/marketing/rpc/marketing"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseResp           = marketing.BaseResp
	AccountCreateReq   = marketing.AccountCreateReq
	AccountUpdateReq   = marketing.AccountUpdateReq
	AccountInfoReq     = marketing.AccountInfoReq
	AccountListReq     = marketing.AccountListReq
	AccountInfo        = marketing.AccountInfo
	AccountListResp    = marketing.AccountListResp
	TokenInfo          = marketing.TokenInfo
	GetTokenReq        = marketing.GetTokenReq
	PromotionCreateReq = marketing.PromotionCreateReq

	MarketingCenter interface {
		//  账户板块 RPC 服务
		AccountCreate(ctx context.Context, in *AccountCreateReq, opts ...grpc.CallOption) (*BaseResp, error)
		AccountUpdate(ctx context.Context, in *AccountUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetAccountInfo(ctx context.Context, in *AccountInfoReq, opts ...grpc.CallOption) (*AccountInfo, error)
		AccountList(ctx context.Context, in *AccountListReq, opts ...grpc.CallOption) (*AccountListResp, error)
		GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*TokenInfo, error)
		SetToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error)
		PromotionCreate(ctx context.Context, in *PromotionCreateReq, opts ...grpc.CallOption) (*BaseResp, error)
	}

	defaultMarketingCenter struct {
		cli zrpc.Client
	}
)

func NewMarketingCenter(cli zrpc.Client) MarketingCenter {
	return &defaultMarketingCenter{
		cli: cli,
	}
}

//  账户板块 RPC 服务
func (m *defaultMarketingCenter) AccountCreate(ctx context.Context, in *AccountCreateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.AccountCreate(ctx, in, opts...)
}

func (m *defaultMarketingCenter) AccountUpdate(ctx context.Context, in *AccountUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.AccountUpdate(ctx, in, opts...)
}

func (m *defaultMarketingCenter) GetAccountInfo(ctx context.Context, in *AccountInfoReq, opts ...grpc.CallOption) (*AccountInfo, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.GetAccountInfo(ctx, in, opts...)
}

func (m *defaultMarketingCenter) AccountList(ctx context.Context, in *AccountListReq, opts ...grpc.CallOption) (*AccountListResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.AccountList(ctx, in, opts...)
}

func (m *defaultMarketingCenter) GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*TokenInfo, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.GetToken(ctx, in, opts...)
}

func (m *defaultMarketingCenter) SetToken(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.SetToken(ctx, in, opts...)
}

func (m *defaultMarketingCenter) PromotionCreate(ctx context.Context, in *PromotionCreateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.PromotionCreate(ctx, in, opts...)
}
