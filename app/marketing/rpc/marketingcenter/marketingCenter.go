// Code generated by goctl. DO NOT EDIT!
// Source: marketing.proto

package marketingcenter

import (
	"context"

	"business/app/marketing/rpc/marketing"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseResp                            = marketing.BaseResp
	CampaignCreateReq                   = marketing.CampaignCreateReq
	CampaignInfo                        = marketing.CampaignInfo
	CampaignInfoReq                     = marketing.CampaignInfoReq
	CampaignListReq                     = marketing.CampaignListReq
	CampaignListResp                    = marketing.CampaignListResp
	CampaignUpdateReq                   = marketing.CampaignUpdateReq
	ContinentResp                       = marketing.ContinentResp
	ContinentResp_Continent             = marketing.ContinentResp_Continent
	CountriesResp                       = marketing.CountriesResp
	CountriesResp_OverseasRegionCountry = marketing.CountriesResp_OverseasRegionCountry
	CreativeSizeInfo                    = marketing.CreativeSizeInfo
	CreativeSizePlacement               = marketing.CreativeSizePlacement
	CreativeSizeSample                  = marketing.CreativeSizeSample
	DictionaryReq                       = marketing.DictionaryReq
	DictionaryResp                      = marketing.DictionaryResp
	DictionaryResp_Dictionary           = marketing.DictionaryResp_Dictionary
	EmptyParamsReq                      = marketing.EmptyParamsReq
	GetTargetingByNameReq               = marketing.GetTargetingByNameReq
	GetTargetingByTargetingIdReq        = marketing.GetTargetingByTargetingIdReq
	PositionListReq                     = marketing.PositionListReq
	PositionListResp                    = marketing.PositionListResp
	Targeting                           = marketing.Targeting
	TargetingListReq                    = marketing.TargetingListReq
	TargetingListResp                   = marketing.TargetingListResp

	MarketingCenter interface {
		CampaignCreate(ctx context.Context, in *CampaignCreateReq, opts ...grpc.CallOption) (*BaseResp, error)
		CampaignList(ctx context.Context, in *CampaignListReq, opts ...grpc.CallOption) (*CampaignListResp, error)
		CampaignUpdate(ctx context.Context, in *CampaignUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetCampaignInfo(ctx context.Context, in *CampaignInfoReq, opts ...grpc.CallOption) (*CampaignInfo, error)
		DictQuery(ctx context.Context, in *DictionaryReq, opts ...grpc.CallOption) (*DictionaryResp, error)
		Continents(ctx context.Context, in *EmptyParamsReq, opts ...grpc.CallOption) (*ContinentResp, error)
		GetCountries(ctx context.Context, in *EmptyParamsReq, opts ...grpc.CallOption) (*CountriesResp, error)
		TargetingCreate(ctx context.Context, in *Targeting, opts ...grpc.CallOption) (*BaseResp, error)
		TargetingList(ctx context.Context, in *TargetingListReq, opts ...grpc.CallOption) (*TargetingListResp, error)
		GetTargetingByName(ctx context.Context, in *GetTargetingByNameReq, opts ...grpc.CallOption) (*Targeting, error)
		GetTargetingByTargetingId(ctx context.Context, in *GetTargetingByTargetingIdReq, opts ...grpc.CallOption) (*Targeting, error)
		GetPositions(ctx context.Context, in *PositionListReq, opts ...grpc.CallOption) (*PositionListResp, error)
	}

	defaultMarketingCenter struct {
		cli zrpc.Client
	}
)

func NewMarketingCenter(cli zrpc.Client) MarketingCenter {
	return &defaultMarketingCenter{
		cli: cli,
	}
}

func (m *defaultMarketingCenter) CampaignCreate(ctx context.Context, in *CampaignCreateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.CampaignCreate(ctx, in, opts...)
}

func (m *defaultMarketingCenter) CampaignList(ctx context.Context, in *CampaignListReq, opts ...grpc.CallOption) (*CampaignListResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.CampaignList(ctx, in, opts...)
}

func (m *defaultMarketingCenter) CampaignUpdate(ctx context.Context, in *CampaignUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.CampaignUpdate(ctx, in, opts...)
}

func (m *defaultMarketingCenter) GetCampaignInfo(ctx context.Context, in *CampaignInfoReq, opts ...grpc.CallOption) (*CampaignInfo, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.GetCampaignInfo(ctx, in, opts...)
}

func (m *defaultMarketingCenter) DictQuery(ctx context.Context, in *DictionaryReq, opts ...grpc.CallOption) (*DictionaryResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.DictQuery(ctx, in, opts...)
}

func (m *defaultMarketingCenter) Continents(ctx context.Context, in *EmptyParamsReq, opts ...grpc.CallOption) (*ContinentResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.Continents(ctx, in, opts...)
}

func (m *defaultMarketingCenter) GetCountries(ctx context.Context, in *EmptyParamsReq, opts ...grpc.CallOption) (*CountriesResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.GetCountries(ctx, in, opts...)
}

func (m *defaultMarketingCenter) TargetingCreate(ctx context.Context, in *Targeting, opts ...grpc.CallOption) (*BaseResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.TargetingCreate(ctx, in, opts...)
}

func (m *defaultMarketingCenter) TargetingList(ctx context.Context, in *TargetingListReq, opts ...grpc.CallOption) (*TargetingListResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.TargetingList(ctx, in, opts...)
}

func (m *defaultMarketingCenter) GetTargetingByName(ctx context.Context, in *GetTargetingByNameReq, opts ...grpc.CallOption) (*Targeting, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.GetTargetingByName(ctx, in, opts...)
}

func (m *defaultMarketingCenter) GetTargetingByTargetingId(ctx context.Context, in *GetTargetingByTargetingIdReq, opts ...grpc.CallOption) (*Targeting, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.GetTargetingByTargetingId(ctx, in, opts...)
}

func (m *defaultMarketingCenter) GetPositions(ctx context.Context, in *PositionListReq, opts ...grpc.CallOption) (*PositionListResp, error) {
	client := marketing.NewMarketingCenterClient(m.cli.Conn())
	return client.GetPositions(ctx, in, opts...)
}
