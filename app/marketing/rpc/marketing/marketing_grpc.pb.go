// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pb/marketing.proto

package marketing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketingCenterClient is the client API for MarketingCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketingCenterClient interface {
	CampaignCreate(ctx context.Context, in *CampaignCreateReq, opts ...grpc.CallOption) (*BaseResp, error)
	CampaignList(ctx context.Context, in *CampaignListReq, opts ...grpc.CallOption) (*CampaignListResp, error)
	CampaignUpdate(ctx context.Context, in *CampaignUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
	GetCampaignInfo(ctx context.Context, in *CampaignInfoReq, opts ...grpc.CallOption) (*CampaignInfo, error)
	DictQuery(ctx context.Context, in *DictionaryReq, opts ...grpc.CallOption) (*DictionaryResp, error)
	Continents(ctx context.Context, in *EmptyParamsReq, opts ...grpc.CallOption) (*ContinentResp, error)
	GetCountries(ctx context.Context, in *EmptyParamsReq, opts ...grpc.CallOption) (*CountriesResp, error)
	TargetingCreate(ctx context.Context, in *Targeting, opts ...grpc.CallOption) (*BaseResp, error)
	TargetingList(ctx context.Context, in *TargetingListReq, opts ...grpc.CallOption) (*TargetingListResp, error)
	GetTargetingByName(ctx context.Context, in *GetTargetingByNameReq, opts ...grpc.CallOption) (*Targeting, error)
	GetTargetingByTargetingId(ctx context.Context, in *GetTargetingByTargetingIdReq, opts ...grpc.CallOption) (*Targeting, error)
	GetPositions(ctx context.Context, in *PositionListReq, opts ...grpc.CallOption) (*PositionListResp, error)
}

type marketingCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketingCenterClient(cc grpc.ClientConnInterface) MarketingCenterClient {
	return &marketingCenterClient{cc}
}

func (c *marketingCenterClient) CampaignCreate(ctx context.Context, in *CampaignCreateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/CampaignCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) CampaignList(ctx context.Context, in *CampaignListReq, opts ...grpc.CallOption) (*CampaignListResp, error) {
	out := new(CampaignListResp)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/CampaignList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) CampaignUpdate(ctx context.Context, in *CampaignUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/CampaignUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) GetCampaignInfo(ctx context.Context, in *CampaignInfoReq, opts ...grpc.CallOption) (*CampaignInfo, error) {
	out := new(CampaignInfo)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/GetCampaignInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) DictQuery(ctx context.Context, in *DictionaryReq, opts ...grpc.CallOption) (*DictionaryResp, error) {
	out := new(DictionaryResp)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/DictQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) Continents(ctx context.Context, in *EmptyParamsReq, opts ...grpc.CallOption) (*ContinentResp, error) {
	out := new(ContinentResp)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/Continents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) GetCountries(ctx context.Context, in *EmptyParamsReq, opts ...grpc.CallOption) (*CountriesResp, error) {
	out := new(CountriesResp)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/GetCountries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) TargetingCreate(ctx context.Context, in *Targeting, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/TargetingCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) TargetingList(ctx context.Context, in *TargetingListReq, opts ...grpc.CallOption) (*TargetingListResp, error) {
	out := new(TargetingListResp)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/TargetingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) GetTargetingByName(ctx context.Context, in *GetTargetingByNameReq, opts ...grpc.CallOption) (*Targeting, error) {
	out := new(Targeting)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/GetTargetingByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) GetTargetingByTargetingId(ctx context.Context, in *GetTargetingByTargetingIdReq, opts ...grpc.CallOption) (*Targeting, error) {
	out := new(Targeting)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/GetTargetingByTargetingId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) GetPositions(ctx context.Context, in *PositionListReq, opts ...grpc.CallOption) (*PositionListResp, error) {
	out := new(PositionListResp)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/GetPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketingCenterServer is the server API for MarketingCenter service.
// All implementations must embed UnimplementedMarketingCenterServer
// for forward compatibility
type MarketingCenterServer interface {
	CampaignCreate(context.Context, *CampaignCreateReq) (*BaseResp, error)
	CampaignList(context.Context, *CampaignListReq) (*CampaignListResp, error)
	CampaignUpdate(context.Context, *CampaignUpdateReq) (*BaseResp, error)
	GetCampaignInfo(context.Context, *CampaignInfoReq) (*CampaignInfo, error)
	DictQuery(context.Context, *DictionaryReq) (*DictionaryResp, error)
	Continents(context.Context, *EmptyParamsReq) (*ContinentResp, error)
	GetCountries(context.Context, *EmptyParamsReq) (*CountriesResp, error)
	TargetingCreate(context.Context, *Targeting) (*BaseResp, error)
	TargetingList(context.Context, *TargetingListReq) (*TargetingListResp, error)
	GetTargetingByName(context.Context, *GetTargetingByNameReq) (*Targeting, error)
	GetTargetingByTargetingId(context.Context, *GetTargetingByTargetingIdReq) (*Targeting, error)
	GetPositions(context.Context, *PositionListReq) (*PositionListResp, error)
	mustEmbedUnimplementedMarketingCenterServer()
}

// UnimplementedMarketingCenterServer must be embedded to have forward compatible implementations.
type UnimplementedMarketingCenterServer struct {
}

func (UnimplementedMarketingCenterServer) CampaignCreate(context.Context, *CampaignCreateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampaignCreate not implemented")
}
func (UnimplementedMarketingCenterServer) CampaignList(context.Context, *CampaignListReq) (*CampaignListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampaignList not implemented")
}
func (UnimplementedMarketingCenterServer) CampaignUpdate(context.Context, *CampaignUpdateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampaignUpdate not implemented")
}
func (UnimplementedMarketingCenterServer) GetCampaignInfo(context.Context, *CampaignInfoReq) (*CampaignInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignInfo not implemented")
}
func (UnimplementedMarketingCenterServer) DictQuery(context.Context, *DictionaryReq) (*DictionaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictQuery not implemented")
}
func (UnimplementedMarketingCenterServer) Continents(context.Context, *EmptyParamsReq) (*ContinentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Continents not implemented")
}
func (UnimplementedMarketingCenterServer) GetCountries(context.Context, *EmptyParamsReq) (*CountriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountries not implemented")
}
func (UnimplementedMarketingCenterServer) TargetingCreate(context.Context, *Targeting) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TargetingCreate not implemented")
}
func (UnimplementedMarketingCenterServer) TargetingList(context.Context, *TargetingListReq) (*TargetingListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TargetingList not implemented")
}
func (UnimplementedMarketingCenterServer) GetTargetingByName(context.Context, *GetTargetingByNameReq) (*Targeting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetingByName not implemented")
}
func (UnimplementedMarketingCenterServer) GetTargetingByTargetingId(context.Context, *GetTargetingByTargetingIdReq) (*Targeting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetingByTargetingId not implemented")
}
func (UnimplementedMarketingCenterServer) GetPositions(context.Context, *PositionListReq) (*PositionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositions not implemented")
}
func (UnimplementedMarketingCenterServer) mustEmbedUnimplementedMarketingCenterServer() {}

// UnsafeMarketingCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketingCenterServer will
// result in compilation errors.
type UnsafeMarketingCenterServer interface {
	mustEmbedUnimplementedMarketingCenterServer()
}

func RegisterMarketingCenterServer(s grpc.ServiceRegistrar, srv MarketingCenterServer) {
	s.RegisterService(&MarketingCenter_ServiceDesc, srv)
}

func _MarketingCenter_CampaignCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampaignCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).CampaignCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/CampaignCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).CampaignCreate(ctx, req.(*CampaignCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_CampaignList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampaignListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).CampaignList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/CampaignList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).CampaignList(ctx, req.(*CampaignListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_CampaignUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampaignUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).CampaignUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/CampaignUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).CampaignUpdate(ctx, req.(*CampaignUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_GetCampaignInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampaignInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).GetCampaignInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/GetCampaignInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).GetCampaignInfo(ctx, req.(*CampaignInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_DictQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).DictQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/DictQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).DictQuery(ctx, req.(*DictionaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_Continents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).Continents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/Continents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).Continents(ctx, req.(*EmptyParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_GetCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).GetCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/GetCountries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).GetCountries(ctx, req.(*EmptyParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_TargetingCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Targeting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).TargetingCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/TargetingCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).TargetingCreate(ctx, req.(*Targeting))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_TargetingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetingListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).TargetingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/TargetingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).TargetingList(ctx, req.(*TargetingListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_GetTargetingByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetingByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).GetTargetingByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/GetTargetingByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).GetTargetingByName(ctx, req.(*GetTargetingByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_GetTargetingByTargetingId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetingByTargetingIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).GetTargetingByTargetingId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/GetTargetingByTargetingId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).GetTargetingByTargetingId(ctx, req.(*GetTargetingByTargetingIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_GetPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).GetPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/GetPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).GetPositions(ctx, req.(*PositionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketingCenter_ServiceDesc is the grpc.ServiceDesc for MarketingCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketingCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "marketing.MarketingCenter",
	HandlerType: (*MarketingCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CampaignCreate",
			Handler:    _MarketingCenter_CampaignCreate_Handler,
		},
		{
			MethodName: "CampaignList",
			Handler:    _MarketingCenter_CampaignList_Handler,
		},
		{
			MethodName: "CampaignUpdate",
			Handler:    _MarketingCenter_CampaignUpdate_Handler,
		},
		{
			MethodName: "GetCampaignInfo",
			Handler:    _MarketingCenter_GetCampaignInfo_Handler,
		},
		{
			MethodName: "DictQuery",
			Handler:    _MarketingCenter_DictQuery_Handler,
		},
		{
			MethodName: "Continents",
			Handler:    _MarketingCenter_Continents_Handler,
		},
		{
			MethodName: "GetCountries",
			Handler:    _MarketingCenter_GetCountries_Handler,
		},
		{
			MethodName: "TargetingCreate",
			Handler:    _MarketingCenter_TargetingCreate_Handler,
		},
		{
			MethodName: "TargetingList",
			Handler:    _MarketingCenter_TargetingList_Handler,
		},
		{
			MethodName: "GetTargetingByName",
			Handler:    _MarketingCenter_GetTargetingByName_Handler,
		},
		{
			MethodName: "GetTargetingByTargetingId",
			Handler:    _MarketingCenter_GetTargetingByTargetingId_Handler,
		},
		{
			MethodName: "GetPositions",
			Handler:    _MarketingCenter_GetPositions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/marketing.proto",
}
