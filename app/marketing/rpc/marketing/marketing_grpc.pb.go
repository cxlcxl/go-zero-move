// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pb/marketing.proto

package marketing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketingCenterClient is the client API for MarketingCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketingCenterClient interface {
	PromotionCreate(ctx context.Context, in *PromotionCreateReq, opts ...grpc.CallOption) (*BaseResp, error)
	PromotionList(ctx context.Context, in *PromotionListReq, opts ...grpc.CallOption) (*PromotionListResp, error)
	PromotionUpdate(ctx context.Context, in *PromotionUpdateReq, opts ...grpc.CallOption) (*BaseResp, error)
	CampaignInfo(ctx context.Context, in *CampaignInfoReq, opts ...grpc.CallOption) (*PromotionInfo, error)
	DictQuery(ctx context.Context, in *DictionaryReq, opts ...grpc.CallOption) (*DictionaryResp, error)
	Continents(ctx context.Context, in *EmptyParamsReq, opts ...grpc.CallOption) (*ContinentResp, error)
	GetCountries(ctx context.Context, in *EmptyParamsReq, opts ...grpc.CallOption) (*CountriesResp, error)
}

type marketingCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketingCenterClient(cc grpc.ClientConnInterface) MarketingCenterClient {
	return &marketingCenterClient{cc}
}

func (c *marketingCenterClient) PromotionCreate(ctx context.Context, in *PromotionCreateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/PromotionCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) PromotionList(ctx context.Context, in *PromotionListReq, opts ...grpc.CallOption) (*PromotionListResp, error) {
	out := new(PromotionListResp)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/PromotionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) PromotionUpdate(ctx context.Context, in *PromotionUpdateReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/PromotionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) CampaignInfo(ctx context.Context, in *CampaignInfoReq, opts ...grpc.CallOption) (*PromotionInfo, error) {
	out := new(PromotionInfo)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/CampaignInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) DictQuery(ctx context.Context, in *DictionaryReq, opts ...grpc.CallOption) (*DictionaryResp, error) {
	out := new(DictionaryResp)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/DictQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) Continents(ctx context.Context, in *EmptyParamsReq, opts ...grpc.CallOption) (*ContinentResp, error) {
	out := new(ContinentResp)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/Continents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingCenterClient) GetCountries(ctx context.Context, in *EmptyParamsReq, opts ...grpc.CallOption) (*CountriesResp, error) {
	out := new(CountriesResp)
	err := c.cc.Invoke(ctx, "/marketing.MarketingCenter/GetCountries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketingCenterServer is the server API for MarketingCenter service.
// All implementations must embed UnimplementedMarketingCenterServer
// for forward compatibility
type MarketingCenterServer interface {
	PromotionCreate(context.Context, *PromotionCreateReq) (*BaseResp, error)
	PromotionList(context.Context, *PromotionListReq) (*PromotionListResp, error)
	PromotionUpdate(context.Context, *PromotionUpdateReq) (*BaseResp, error)
	CampaignInfo(context.Context, *CampaignInfoReq) (*PromotionInfo, error)
	DictQuery(context.Context, *DictionaryReq) (*DictionaryResp, error)
	Continents(context.Context, *EmptyParamsReq) (*ContinentResp, error)
	GetCountries(context.Context, *EmptyParamsReq) (*CountriesResp, error)
	mustEmbedUnimplementedMarketingCenterServer()
}

// UnimplementedMarketingCenterServer must be embedded to have forward compatible implementations.
type UnimplementedMarketingCenterServer struct {
}

func (UnimplementedMarketingCenterServer) PromotionCreate(context.Context, *PromotionCreateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromotionCreate not implemented")
}
func (UnimplementedMarketingCenterServer) PromotionList(context.Context, *PromotionListReq) (*PromotionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromotionList not implemented")
}
func (UnimplementedMarketingCenterServer) PromotionUpdate(context.Context, *PromotionUpdateReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromotionUpdate not implemented")
}
func (UnimplementedMarketingCenterServer) CampaignInfo(context.Context, *CampaignInfoReq) (*PromotionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampaignInfo not implemented")
}
func (UnimplementedMarketingCenterServer) DictQuery(context.Context, *DictionaryReq) (*DictionaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictQuery not implemented")
}
func (UnimplementedMarketingCenterServer) Continents(context.Context, *EmptyParamsReq) (*ContinentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Continents not implemented")
}
func (UnimplementedMarketingCenterServer) GetCountries(context.Context, *EmptyParamsReq) (*CountriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountries not implemented")
}
func (UnimplementedMarketingCenterServer) mustEmbedUnimplementedMarketingCenterServer() {}

// UnsafeMarketingCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketingCenterServer will
// result in compilation errors.
type UnsafeMarketingCenterServer interface {
	mustEmbedUnimplementedMarketingCenterServer()
}

func RegisterMarketingCenterServer(s grpc.ServiceRegistrar, srv MarketingCenterServer) {
	s.RegisterService(&MarketingCenter_ServiceDesc, srv)
}

func _MarketingCenter_PromotionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromotionCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).PromotionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/PromotionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).PromotionCreate(ctx, req.(*PromotionCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_PromotionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromotionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).PromotionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/PromotionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).PromotionList(ctx, req.(*PromotionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_PromotionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromotionUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).PromotionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/PromotionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).PromotionUpdate(ctx, req.(*PromotionUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_CampaignInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampaignInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).CampaignInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/CampaignInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).CampaignInfo(ctx, req.(*CampaignInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_DictQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).DictQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/DictQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).DictQuery(ctx, req.(*DictionaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_Continents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).Continents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/Continents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).Continents(ctx, req.(*EmptyParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingCenter_GetCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingCenterServer).GetCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.MarketingCenter/GetCountries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingCenterServer).GetCountries(ctx, req.(*EmptyParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketingCenter_ServiceDesc is the grpc.ServiceDesc for MarketingCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketingCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "marketing.MarketingCenter",
	HandlerType: (*MarketingCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PromotionCreate",
			Handler:    _MarketingCenter_PromotionCreate_Handler,
		},
		{
			MethodName: "PromotionList",
			Handler:    _MarketingCenter_PromotionList_Handler,
		},
		{
			MethodName: "PromotionUpdate",
			Handler:    _MarketingCenter_PromotionUpdate_Handler,
		},
		{
			MethodName: "CampaignInfo",
			Handler:    _MarketingCenter_CampaignInfo_Handler,
		},
		{
			MethodName: "DictQuery",
			Handler:    _MarketingCenter_DictQuery_Handler,
		},
		{
			MethodName: "Continents",
			Handler:    _MarketingCenter_Continents_Handler,
		},
		{
			MethodName: "GetCountries",
			Handler:    _MarketingCenter_GetCountries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/marketing.proto",
}
